// Author: Wang Tianxing<wangtianxing@qiyi.com>
//
// Proto definitions for the query service

import "knowledge/graph/pub/properties.proto";
import "knowledge/pub/common.proto";
import "knowledge/fusion/query/properties.proto";
import "knowledge/pub/qipu_options.proto";
import "knowledge/pub/knowledge.proto";

package knowledge.pub.query;

message TemplateQueryRequest {

  option (service_message_options).method_name = "templateQuery";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional string template_name = 2;

  message TemplateParam {
    optional string name = 1;
    optional string value = 2;
    repeated string array_value = 3;
  }
  // 搜索模板的参数，已弃用，请使用 param
  repeated TemplateParam template_param = 3 [deprecated = true];

  optional QueryHitFormat format = 4 [default = SOURCE];
  optional bool include_source = 5 [default = false, deprecated = true];

  // 搜索模板的参数，可为多个，格式为 name:value
  // 支持数组形式的 value，格式为 name:[value1;value2;value3]
  repeated string param = 6;
  // 返回的字段，支持多个
  repeated string include = 7;
  // 不返回的字段，支持多个
  repeated string exclude = 8;
  // 待查询的表，支持多个
  repeated string table = 9;
  optional int32 from = 10 [default = 0];
  optional int32 size = 11 [default = 10];
  // 排序的参数，可为多个，每个参数格式为 field:ASC/DESC
  repeated string order = 12;

  optional SiteType iqiyi_site = 13 [default = SITE_ZH];
  repeated Language iqiyi_language = 14;
}

message TermsQueryRequest {

  option (service_message_options).method_name = "termsQuery";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  // 查询的参数，可为多个，每个参数格式为 field:value
  // 支持多值查询，格式为 field:[value1;value2;value3]
  repeated string term = 2;
  // 返回的字段，支持多个
  repeated string include = 3;
  // 不返回的字段，支持多个
  repeated string exclude = 4;
  // 待查询的表，支持多个
  repeated string table = 5;
  // 返回结果的格式
  optional QueryHitFormat format = 6 [default = SOURCE];
  optional int32 from = 7 [default = 0];
  optional int32 size = 8 [default = 10];
  // 排序的参数，可为多个，每个参数格式为 field:ASC/DESC
  repeated string order = 9;
  // 支持nested(key_value_pair)查询
  repeated string nested_term = 10;
  optional string nested_path = 11;
  optional SiteType iqiyi_site = 12 [default = SITE_ZH];
  repeated Language iqiyi_language = 13;
}

message QueryUploadedVideosRequest {

  option (service_message_options).method_name = "queryUploadedVideos";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  repeated int64 uploader_id = 2;
  optional int32 from = 3;
  optional int32 size = 4;
  optional QueryHitSortBy sort_by = 5 [default = PAGE_PUBLISH_TIME];
  optional bool is_guest = 6 [default = false];
  optional bool include_episode = 7 [ default = true ];
  optional SiteType iqiyi_site = 8 [default = SITE_ZH];
  repeated Language iqiyi_language = 9;
}

message QueryVideosByPagePublishTimeRequest {
  option (service_message_options).method_name = "queryVideosByPagePublishTime";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional knowledge.pub.Date start_time = 2;
  optional knowledge.pub.Date end_time = 3;
  optional int32 from = 4;
  optional int32 size = 5;
  optional SiteType iqiyi_site = 6 [default = SITE_ZH];
  repeated Language iqiyi_language = 7;
}

message QueryResponse {

  option (service_message_options).method_name = "templateQuery,queryUploadedVideos,queryDspVideos,queryVideosByPagePublishTime,queryCategoryByChannelId,queryCategoryByIds,queryAllChannels,queryAllSubCategories,termsQuery";
  option (service_message_options).type = RESPONSE;

  optional int64 total = 1;
  optional bool has_error = 2 [default = false];
  optional string error_message = 3;
  repeated QueryHit hit = 4;
  repeated QueryAggregation aggregation = 5;
  optional string scroll_id = 6;
  // How much time it costs Elasticsearch to process the request
  optional int64 took_es = 7;
  // How much time it costs RPC server to process the request
  optional int64 took_total = 8;
  optional string bucket = 9;
  optional string event_id = 10;
}

message DspQueryRequest {

  option (service_message_options).method_name = "queryDspVideos";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional int32 from = 2 ;
  optional int32 size = 3 ;

}

message QueryCategoryByChannelIdRequest {

  option (service_message_options).method_name = "queryCategoryByChannelId";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional int64 channel_id = 2;
  optional int32 from = 3 [ default = 0 ];
  optional int32 size = 4 [ default = 10 ];
  optional bool displayable_only = 5 [ default = false ];
  optional Category.Type category_type = 6 [default = EPISODE];
  optional knowledge.pub.Brand brand = 7 [default = IQIYI];
}

message QueryCategoryByIdsRequest {

  option (service_message_options).method_name = "queryCategoryByIds";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  repeated int64 category_ids = 2;
}

message QueryAllSubCategoriesRequest {

  option (service_message_options).method_name = "queryAllSubCategories";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional int32 from = 2 [ default = 0 ];
  optional int32 size = 3 [ default = 10 ];
  optional bool displayable_only = 4 [default =false ] ;
  optional Category.Type category_type = 5 [default = EPISODE];
  optional knowledge.pub.Brand brand = 6 [default = IQIYI];

}

message QueryAllChannelsRequest {

  option (service_message_options).method_name = "queryAllChannels";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional int32 from = 2 ;
  optional int32 size = 3 ;
  optional Category.Type category_type = 4 [default = EPISODE];

}

message QuerySimilarFilmTvRequest {

  option (service_message_options).method_name = "querySimilarFilmTv";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional int32 from = 2 [ default = 0 ];
  optional int32 size = 3 [ default = 10 ];
  optional int64 id = 4;
  optional QueryHitFormat format = 5 [default = SOURCE];
  repeated string include = 6;
  repeated string exclude = 7;

}

message SearchRecommendRequest {

  // 业务类型
  enum BusinessType {
    UNKNOWN_BUSINESS_TYPE = 0;
    LIGHT_NOVEL = 1;
  }

  option (service_message_options).method_name = "searchRecommend";
  option (service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional int32 from = 2 [ default = 0 ];
  optional int32 size = 3 [ default = 10 ];
  optional string keyword = 4;
  optional BusinessType business_type = 5  [default = UNKNOWN_BUSINESS_TYPE];

}

message SearchRecommendResponse {

  option (service_message_options).method_name = "searchRecommend";
  option (service_message_options).type = RESPONSE;

  repeated string suggest = 1;
  optional bool has_error = 2 [default = false];
  optional string error_message = 3;
  optional int64 took_total = 8;
}

message VerticalSearchRequest {

  enum Area {
    book = 0;
    acn = 1;
  }

  option (service_message_options).method_name = "verticalSearch";
  option (service_message_options).type = REQUEST;
  optional knowledge.pub.User user = 1;
  optional Area area = 2;
  optional string keyword = 3;
  optional string platform = 4;
  optional int32 from = 5;
  optional int32 size = 6;

}

message VerticalSearchResponse {
  option (service_message_options).method_name = "verticalSearch";
  option (service_message_options).type = RESPONSE;
  optional int64 total = 1;
  optional bool has_error = 2 [default = false];
  optional string error_message = 3;
  repeated QueryHit hit = 4;
  repeated string terms = 5;
  optional int64 took_total = 6;
  optional string bucket = 7;
  optional string event_id = 8;
}

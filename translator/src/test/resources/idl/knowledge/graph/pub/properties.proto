// Author: Yin Zeng (zengyin@qiyi.com)
//
// Proto definitions for properties for Graph service.

import "knowledge/pub/common.proto";
import "knowledge/pub/properties.proto";
import "knowledge/pub/metadatas.proto";
import "knowledge/pub/library/film_library_idl.proto";
import "search/common/proto/library.proto";

package knowledge.graph.pub;

enum RankingPolicy {
  PLAY_COUNT = 0;
  // 注意，这个PUBLISH_TIME是优先按照 last_issue_date 来排序，如果实体没有 last_issue_date,才取 publish_time来排序
  PUBLISH_TIME = 1;
  RELEVANCE = 2;
  SIZE = 3;
  // REAL_PUBLISH_TIME 是优先取publish_time排序，如果没有publish_time，则取last_issue_date
  REAL_PUBLISH_TIME=4;
}

// Depicts the role played by the celebrity in the video.
message RoleInfo {
  optional string role = 1;
  repeated string character = 2;
}

enum V2VPropertyKey {
  DIRECTOR = 0;
  MAIN_CHARACTER = 1;
  ACTOR = 2;
  HOST = 3;
  GUEST = 4;
  CATEGORY = 5;
  CHANNEL_ID = 6;
  STAR = 7;
  SINGER = 8;
  COMPOSER = 9;
  LANGUAGE = 10;
  REGION = 11;
}

// Used to depict one property in video to video calculating.
message V2VPropertyKeyValue {
  required V2VPropertyKey key = 1;
  repeated string value = 2;
}

message V2VPropertyList {
  repeated V2VPropertyKeyValue property_key_value = 1;
}

message VideoMeta {
  required int64 id = 1;
  optional string title = 2;

  // The following fields is used for ranking.
  optional knowledge.pub.Date publish_time = 3;
  repeated string region = 4;
  repeated string language = 5;
}

message VideoData {
  required VideoMeta video_meta = 1;
  repeated V2VPropertyKeyValue property_key_value = 2;
}

// Used to depict the video to video relation
message V2VRelationProto {
  optional VideoMeta host_meta = 1;
  optional VideoMeta guest_meta = 2;

  message Relation {
    required double closeness = 1;
    repeated V2VPropertyKeyValue common_property = 2;
    // A description for this relation, maybe a series title.
    optional string description = 3;
  }

  optional Relation total_relation = 3;
  optional Relation series_relation = 4;
  repeated Relation per_property_relation = 5;
}

// Used to depict a set of V2VRelationProto
message V2VRelationProtoList {
  repeated V2VRelationProto v2v_relation_proto = 1;
}

message AlbumVideoData {
  optional string title = 1;
  optional string display_name = 2;

  required int64 qipu_id = 3;
  optional int32 channel_id = 4;
  optional int64 tvid = 5;
  optional int64 qitan_id = 6;

  optional string thumbnail_url = 7;
  optional string page_url = 8;
  optional int32 duration = 9;

  // When the entity is an album for TV drama,
  // we will specify how many episodes currently available.
  optional int32 available_episodes = 10;

  optional int32 total_episodes = 11;

  // When the entity is an album for variety show,
  // we will specify the date of the latest issue.
  optional knowledge.pub.Date last_issue_date = 12;

  optional bool is_high_definition = 13;
  //是否为1080p视频，仅在episode中出现
  optional bool is_1080p = 14;

  // Times of this video has been played.
  optional int64 play_count = 15;

  optional knowledge.pub.Date publish_time = 16;

  optional double relevance_score = 17;
  repeated RoleInfo role_info = 18;

  // The details of v2v relation.
  optional V2VRelationProto v2v_relation = 19;

  optional int64 father_album_id = 20;

  // The qiso doc id.
  optional string doc_id = 21;

  // Qiyi produced flag.
  optional bool is_qiyi_produced = 22 [default = false];

  repeated AlbumVideoData child_data = 23;

  optional int64 comments_count = 24;

  // Deprecated, use feed instead.
  // For non-qiyi resource.
  optional knowledge.pub.SiteInfoList site_info_list = 25;

  // The value of format_iqiyi_pc in qipu entity.
  optional string vid = 26;

  message OtherInfo {
      optional int64 qipu_id = 1;
      optional int64 film_tv_id = 2;
      repeated string category = 3;
      repeated string tag = 4;
      optional knowledge.pub.Metadata metadata = 5;
      optional knowledge.pub.UgcMetadata ugc_metadata = 6;
      optional knowledge.pub.library.FilmTvMetadata film_tv_metadata = 7;
      optional int64 display_play_count = 8;
      optional search.indexing.pub.PlaySource play_source = 9;
      optional knowledge.pub.Boss boss = 10;
  }
  optional OtherInfo other_info = 27;

  optional int32 child_order = 28;
  optional string album_source_type = 29;

  repeated knowledge.pub.Feed feed = 30;

  optional bool is_domestic_only = 31;
  repeated knowledge.pub.AccessPlayControl access_play_control = 32;

  optional knowledge.pub.Date page_publish_time = 33;
  optional int64 uploader_id = 34;
  optional knowledge.pub.PagePublishStatus page_publish_status = 35;
  optional int64 display_play_count = 36;

  optional int64 corresponding_id = 37;
  
  optional float sns_score = 38;
  
  optional knowledge.pub.PublicLevel public_level = 39;

  optional string father_album_title = 41;

  optional string father_collection_title = 42;

  optional int32 collection_child_order = 43;

  optional string subordinate_title = 44;

  optional string description = 45;
  //是否为混合专辑，仅在Album中出现
  optional bool is_boss_mixer = 46;
  //是否为3d视频，仅在episode中出现
  optional bool is_3d = 47;
  //是否独播，仅在Album中出现
  optional bool exclusive_status_iqiyi = 48;
  //来源code，仅在episode中出现
  optional int64 vrs_source_code = 49;

  optional int64 start_play_time = 50;

  optional int64 stop_play_time = 51;
  
  optional knowledge.pub.Boss boss = 52;

  optional int64 next_video_id = 53;

  optional int64 newest_video_id = 54;

  optional knowledge.pub.ChargeBase charge_base = 55;
  // 来源video_info,仅在episode里面出现
  optional knowledge.pub.VideoInfo video_info = 56;

  optional bool should_ignore_vip_status = 57 [default = false];

  repeated int64 ad_tag_id = 58;

  repeated knowledge.pub.LocaleBase local_base = 59;

  optional int64 ad_publish_date = 60;

  optional double pps_wiki_score = 61;

  optional knowledge.pub.ContentType content_type = 62;

  optional string qisu = 63;

  optional string prompt_description = 64;

  optional bool is_download_allowed =65;

  optional int64 kv_album_id = 66;
  message ChildInfo {
  // id
    optional int64 id = 1;
  // is vip(member only)
    optional int32 is_member_only = 2;
  // purchase type
    optional int32 purchase_type = 3;
  // pay type
    optional int32 pay_type = 4 [ default = 1 ];
    // title
    optional string title = 5;
    // page_url
    optional string page_url = 6;
  }
  message ParentInfo {
  // id
  optional int64 id = 1;
  // name
  optional string name = 2;
  // picture url
  optional string picture_url = 3;
  // page url
  optional string page_url = 4;
  // sns score
  optional double sns_score = 5;
  // pps wiki score
  optional double pps_wiki_score = 6;
  }
  optional ChildInfo first_child_info = 67;
  optional ParentInfo parent_info = 68;
  optional string newest_video_title = 69;
  optional int32 format_property = 70;
  optional int32 purchase_type = 71;
  optional int32 pay_type = 72;
  optional string short_title = 73;
  optional bool is_newest_video = 74;
  optional string poster_url = 75;
  optional int64 page_first_online_time = 76;
  optional string focusImage4Pc = 77;
  optional string focusUpdateTime = 78;
  repeated string site_name = 79;
  optional string qiyu_picture_url = 80;
  optional bool qiyu_is_focus_valid = 81 [default = false];
  // PC客户端用播放源，与qisu的主要区别在于,对于tvname, qisu是先取base中的display_name, 再取pps_base中的display_name。
  // 该字段是先取pps_base中的，再取base中的。其他差别请参考common-transform中，这2个字段的获取方法。
  // 焦点图目前使用该字段返回播放源地址
  optional string qips = 82;
  repeated knowledge.pub.MultiPublish multi_publish = 83;
  optional string source_provider = 84;
}

message AlbumVideoDataList {
  repeated AlbumVideoData entity_info = 1;
}

message CelebrityData {
  required string name = 1;

  // The corresponding qipu id.
  required int64 entity_id = 2;

  optional string thumbnail_url = 3;
  repeated string alias_name = 4;
  optional int64 qitan_id = 5;
  optional int64 passport_id = 6;
  optional string qitan_picture_url = 7;
  optional int64 comments_count = 8;
  optional int64 up_count = 9;
  optional int64 down_count = 10;
  optional string imageformat_iqiyi_people = 11;

  // 与被查询明星之间的关系，如妻子，女儿
  optional string relationship = 12;
}

message CelebrityDataList {
  repeated CelebrityData celebrity_info_summary = 1;
}

message MiniAutoClusterBase {
  optional double popularity = 1;
}

message MicroClusterData {
  required string cluster_description = 1;

  repeated CelebrityData related_celebrity = 2;

  repeated AlbumVideoData related_video = 3;

  optional double popularity = 4;

  optional int32 size = 5;

  optional knowledge.pub.Date create_date = 6;

  optional knowledge.pub.Date last_update_date = 7;
}

enum EntityType {
  QIPU_ENTITY = 0;
  UPLOADER = 1;
}

enum RelationType {
  UPLOADER2VIDEO = 0;
}

message Node {
  required int64 id = 1;
  required EntityType type = 2;
}

message Association {
  optional int64 id = 1;
  optional EntityType type = 2;
  optional string description = 3;
}

message Relationship {
  optional RelationType relation_type = 1;
  optional double closeness = 2;
  optional knowledge.pub.Date create_time = 3;
  repeated Association association = 4;
  optional string description = 5;
}

message AdjacencyList {
  optional Node source = 1;

  message Relation {
    optional Node target = 1;
    optional Relationship relationship = 2;

    // If the target is an album,
    // we put relations of the uploader and the album's child episodes here.
    repeated Relation child_relation = 3;
  }

  repeated Relation relation = 2;
}

message Topic {
  optional int64 search_index = 1;

  message NewsSummary {
    // The news title.
    optional string title = 1;

    // The news summary.
    optional string description = 2;

    // The value is got from the web page
    optional string provider = 3;

    // The value is got from the web page,
    // and it is the number of milliseconds since January 1, 1970, 0:00:00 GMT.
    optional int64 publish_date = 4;

    // The image url for this news if exists.
    optional string image_url = 5;

    // The page url of the news summary.
    optional string original_page_url = 6;
  }

  repeated NewsSummary news_summary_list = 2;

    // The value is got from the time we crawling the topic web page.
  optional int64 crawl_time = 3;
}

message RecommendVideo {
  // The video title.
  optional string title = 1;

  // The video image.
  optional string image_url = 2;

  // The video playing address.
  optional string page_url = 3;

  // The video source.
  enum Source {
      PGC = 1;
      UGC = 2;
      SHORT_VIDEO_CLUSTER = 3;
  }
  optional Source source = 4;

  optional int64 publish_date = 5;

  // The video summary desciption.
  optional string description = 6;
}

message CallerInfo {
  // 调用方的平台类型
  optional knowledge.pub.PlayPlatform play_platform = 1;
  // 调用方的IP地址，用于播控过滤
  optional string ip_address = 2;
  // 如果为true，将过滤掉reject_search的视频
  optional bool reject_search = 3 [default = false];
  // 调用方的 location 信息，用于播控过滤；如果location 与 ip_address 同时存在，优先使用 location
  optional knowledge.pub.Location location = 4;
}

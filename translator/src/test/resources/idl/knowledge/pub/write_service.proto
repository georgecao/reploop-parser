// Author: Yin Zeng (zengyin@qiyi.com)
//
// Proto definitions for writing service of qipu

// NOTE:
//   We support writing request for a list of entity_ids of the same entity
//   type. So, requests with a list of entity ids of different types will be
//   DENIED;
import "google/protobuf/descriptor.proto";

import "knowledge/pub/common.proto";
import "knowledge/pub/formats.proto";
import "knowledge/pub/knowledge.proto";
import "knowledge/pub/metadatas.proto";
import "knowledge/pub/properties.proto";
import "knowledge/pub/library/film_library_idl.proto";
import "knowledge/graph/pub/properties.proto";
import "knowledge/pub/qipu_options.proto";

package knowledge.pub;

extend google.protobuf.MessageOptions {
  optional RequestOptions request_options = 60001;
}
// service sdk相关配置，将request和表，接口对应
message RequestOptions {
  optional Table set_table = 1;
  optional string set_interface = 2;
}

// Proto for return type of methods defined in write_rpc_service.thrift
message WriteResponse {
  //option
  option (knowledge.pub.service_message_options).method_name = "writeEntity";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  required RpcStatusInfo rpc_status_info = 1;
  // write service session id
  optional int64 session_id = 2;
}

// Proto for setEntity method defined in write_rpc_service.thrift
message WriteEntityRequest {
  //option
  option (request_options).set_interface = "writeEntity";
  option (knowledge.pub.service_message_options).method_name = "writeEntity";
  option (knowledge.pub.service_message_options).type = REQUEST;

  required User user = 1;

  required int64 entity_id = 2;

  optional bytes merge_entity = 3;

  optional bytes delete_entity = 4;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 5 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 6 [default = false];

  // 消息优先级
  optional Priority priority = 7;

  // 写入站点
  repeated SiteType site = 8;
}

// Proto for setMetadata method defined in write_rpc_service.thrift
message SetMetadataRequest {
  required User user = 1;

  // Metadata for collection, album, episode, scene and shot
  message Info {
    required int64 entity_id = 1;
    required Metadata metadata = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setPeopleMetadata method defined in write_rpc_service.thrift
message SetPeopleMetadataRequest {
  required User user = 1;

  // Metadata for people
  message Info {
    required int64 entity_id = 1;
    required PeopleMetadata metadata = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setImageMetadata method defined in write_rpc_service.thrift
message SetImageMetadataRequest {
  required User user = 1;

  // Metadata for image
  message Info {
    required int64 entity_id = 1;
    required ImageMetadata metadata = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of  setUgc method defined in write_rpc_service.thrift.
message SetUgcMetadataRequest {
  required User user = 1;

  message Info {
     required int64 entity_id = 1;
     required UgcMetadata metadata = 2;
  }
  repeated Info info = 2;
  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setLiveMetadata method defined in write_rpc_service.thrift.
message SetLiveMetadataRequest {
  required User user = 1;

  message Info {
     required int64 entity_id = 1;
     required LiveMetadata metadata = 2;
  }
  repeated Info info = 2;
  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setOrganizationSharePartnerMetadata method defined in write_rpc_service.thrift.
message SetOrganizationSharePartnerMetadataRequest {
  required User user = 1;

  message Info {
     required int64 entity_id = 1;
     required OrganizationSharePartnerMetadata metadata = 2;
  }
  repeated Info info = 2;
  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setAdsMaterialMetadata method defined in write_rpc_service.thrift.
message SetAdsMaterialMetadataRequest {
  required User user = 1;

  message Info {
     required int64 entity_id = 1;
     required AdsMaterialMetadata metadata = 2;
  }
  repeated Info info = 2;
  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setTvLiveCenterMetadata method defined in write_rpc_service.thrift.
message SetTvLiveCenterMetadataRequest {
  required User user = 1;

  message Info {
     required int64 entity_id = 1;
     required TvLiveCenterMetadata metadata = 2;
  }
  repeated Info info = 2;
  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setAppGroupMetadata method defined in write_rpc_service.thrift.
message SetAppGroupMetadataRequest {
  required User user = 1;

  message Info {
     required int64 entity_id = 1;
     required AppGroupMetadata metadata = 2;
  }
  repeated Info info = 2;
  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setDeleted method defined in write_rpc_service.thrift
message SetDeletedRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required bool deleted = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];

  // skip write data-integrity
  optional bool delete_skip_c2f = 5 [default = false];
}

// Proto for setPuyu method defined in write_rpc_service.thrift
message SetPuyuRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required Puyu puyu = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];

  // Only ColumnGroup in set
  // [PUYU,PPS_PUYU] is allowed.
  optional ColumnGroup column_group = 5 [default = PUYU];
}

// Proto for setSeo method defined in write_rpc_service.thrift
message SetSeoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required Seo seo = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setBase method defined in write_rpc_service.thrift
message SetBaseRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required Base base = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];

  // Only ColumnGroup in set
  // [BASE,PPS_BASE] is allowed.
  optional ColumnGroup column_group = 5 [default = BASE];
}

// Proto for setCommonBase method defined in write_rpc_service.thrift
message SetCommonBaseRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required CommonBase common_base = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setUgcBase method defined in write_rpc_service.thrift
message SetUgcBaseRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required UgcBase ugc_base = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setBoss method defined in write_rpc_service.thrift
message SetBossRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required Boss boss = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setStats method defined in write_rpc_service.thrift
message SetStatsRequest {
  required User user = 1;

  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    required Stats stats = 2;
  }
  repeated Info info = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];
}

// Proto for setDoubanId method defined in write_rpc_service.thrift
message SetDoubanIdRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 douban_id = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for increase displayPlayCount, playCount, commentsCount, shareCount, upCount
// downCount and subscribeCount
message IncreaseStatsCountRequest {
  required User user = 1;

  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    required int64 count = 2;
  }
  required Info info = 3;
}

// Proto for set displayPlayCount, playCount, commentsCount, shareCount, upCount
// downCount, subscribeCount, installCount and clickCount.
message SetStatsCountRequest {
  required User user = 1;

  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    required int64 count = 2;
  }
  repeated Info info = 3;
}

// Proto for setLiveChildSummary method defined in write_rpc_service.thrift
message SetLiveChildSummaryRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required LiveMetaSummary live_meta_summary = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setQitan method defined in write_rpc_service.thrift
message SetQitanRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required Qitan qitan = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setBaidu method defined in write_rpc_service.thrift
message SetBaiduRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required Baidu baidu = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setStartEndPoint method defined in write_rpc_service.thrift
message SetStartEndPointRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required StartEndPoint start_end_point = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setCollectionType method defined in write_rpc_service.thrift
message SetCollectionTypeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required CollectionCommon.CollectionType collection_type = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setCollectionSubType method defined in write_rpc_service.thrift
message SetCollectionSubTypeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required CollectionCommon.CollectionSubType collection_sub_type = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setPpsUgcChannelMetadata method defined in write_rpc_service.thrift
message SetPpsUgcChannelMetadataRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required PpsUgcChannelMetadata pps_ugc_channel_metadata = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setPpsUgcChannelIdList method defined in write_rpc_service.thrift
message SetPpsUgcChannelIdListRequest {
  required User user = 1;
  message Info {
    required int64 entity_id = 1;
    required PpsUgcChannelIdList pps_ugc_channel_id_list = 2;
  }
  repeated Info info = 2;
  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setPpsUgcChannelAuditStatus method defined in write_rpc_service.thrift
message SetPpsUgcChannelAuditStatusRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required PpsUgcChannelAuditStatus pps_ugc_channel_audit_status = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setPpsUgcChannelStats method defined in write_rpc_service.thrift
message SetPpsUgcChannelStatsRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required PpsUgcChannelStats pps_ugc_channel_stats = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setUgcCheck method defined in write_rpc_service.thrift
message SetUgcCheckRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required UgcCheck ugc_check = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setVideoFileInfo method defined in write_rpc_service.thrift
message SetVideoFileInfoRequest {
  required User user = 1;

  // Only ColumnGroup in set
  // [RAW_VIDEO_FILE_INFO,FILM_VIDEO_FILE_INFO] is allowed.
  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    required VideoFileInfo video_file_info = 2;
  }
  repeated Info info = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// The request of setPlatformRegionControl is deprecated
// Recommended, to use the request of addAccessPlayControl or deleteAccessPlayControl.
// Proto for setPlatformRegionControl method defined in write_rpc_service.thrift
message SetPlatformRegionControlRequest {
  required User user = 1;

  // Only ColumnGroup in set
  // [IQIYI_PLATFORM_REGION_CONTROL,PPS_PLATFORM_REGION_CONTROL] is allowed.
  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    required PlatformRegionControl platform_region_control = 2;
  }
  repeated Info info = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setAvailableStatus method defined in write_rpc_service.thrift
message SetAvailableStatusRequest {
  required User user = 1;

  // When add this new field,
  // we make this field optional to adapt the old requests
  // for seamless transition of the online interface.
  // Only ColumnGroup in set
  // [AVAILABLE_STATUS, IQIYI_AVAILABLE_STATUS, PPS_AVAILABLE_STATUS] is allowed.
  optional ColumnGroup column_group = 4 [default = AVAILABLE_STATUS];

  message Info {
    required int64 entity_id = 1;
    required AvailableStatus available_status = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setPagePublishStatus method defined in write_rpc_service.thrift
message SetPagePublishStatusRequest {
  required User user = 1;

  // Only ColumnGroup in set
  // [PAGE_PUBLISH_STATUS, IQIYI_PAGE_PUBLISH_STATUS, PPS_PAGE_PUBLISH_STATUS] is allowed.
  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    required PagePublishStatus page_publish_status = 2;
  }
  repeated Info info = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setLiveStatus method defined in write_rpc_service.thrift
message SetLiveStatusRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required LiveStatus live_status = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setUgcOperation method defined in write_rpc_service.thrift
message SetUgcOperationRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required UgcOperation ugc_operation = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setPpsUrls method defined in write_rpc_service.thrift
message SetPpsUrlsRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required PpsUrls pps_urls = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setContentType method defined in write_rpc_service.thrift
message SetContentTypeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required ContentType content_type = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setPpsCategoryPlatformData method defined in write_rpc_service.thrift
message SetPpsCategoryPlatformDataRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required PpsCategoryPlatformData pps_category_platform_data = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setPpsCategoryBase method defined in write_rpc_service.thrift
message SetPpsCategoryBaseRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required PpsCategoryBase pps_category_base = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setGameInfo method defined in write_rpc_service.thrift
message SetGameInfoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required GameInfo game_info = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setSharePartner method defined in write_rpc_service.thrift
message SetSharePartnerRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required SharePartner share_partner = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setDrmKey method defined in write_rpc_service.thrift
message SetDrmKeyRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required DrmKey drm_key = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setStreamList method defined in write_rpc_service.thrift
message SetStreamListRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required StreamList stream_list = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setRelatedPeopleList method defined in write_rpc_service.thrift
message SetRelatedPeopleListRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required RelatedPeopleList related_people_list = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setRelatedEpisodeList method defined in write_rpc_service.thrift
message SetRelatedEpisodeListRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required RelatedEpisodeList related_episode_list = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setRepresentativeWorkList method defined in write_rpc_service.thrift
message SetRepresentativeWorkListRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required RepresentativeWorkList representative_work_list = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setPassportId method defined in write_rpc_service.thrift
message SetPassportIdRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 passport_id = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setTotalDuration method defined in write_rpc_service.thrift
message SetTotalDurationRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int32 total_duration = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setUgcPlayListInfo method defined in write_rpc_service.thrift
message SetUgcPlayListInfoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required UgcPlayListInfo ugc_play_list_info = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setSearchInfo method defined in write_rpc_service.thrift
message SetSearchInfoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required SearchInfo search_info = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setBrand method defined in write_rpc_service.thrift
message SetBrandRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required Brand which_brand_create = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setUploadType method defined in write_rpc_service.thrift
message SetUploadTypeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required UploadType upload_type = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setFilmTvCheckStatus method defined in write_rpc_service.thrift
message SetFilmTvCheckStatusRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required FilmTvCheckStatus film_tv_check_status = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setFilmTvId method defined in write_rpc_service.thrift
message SetFilmTvIdRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 film_tv_id = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setIsAppGroup method defined in write_rpc_service.thrift
message SetIsAppGroupRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required bool is_app_group = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setAppMediaList method defined in write_rpc_service.thrift
message SetAppMediaListRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required AppMediaList app_media_list = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setAppGameInfo method defined in write_rpc_service.thrift
message SetAppGameInfoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required AppGameInfo app_game_info = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setAppPermissionList method defined in write_rpc_service.thrift
message SetAppPermissionListRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required AppPermissionList app_permission_list = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setAppCheck method defined in write_rpc_service.thrift
message SetAppCheckRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required AppCheck app_check = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setAppRating method defined in write_rpc_service.thrift
message SetAppRatingRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required AppRating app_rating = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setAppBase method defined in write_rpc_service.thrift
message SetAppBaseRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required AppBase app_base = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setVirtualUgcInfo method defined in write_rpc_service.thrift
message SetVirtualUgcInfoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required VirtualUgcInfo virtual_ugc_info = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setRecommendDataSourceList method defined in write_rpc_service.thrift
message SetRecommendDataSourceListRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required RecommendDataSourceList recommend_data_source_list = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setOnlineCountUpdateStrategy method defined in write_rpc_service.thrift
message SetOnlineCountUpdateStrategyRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required OnlineCountUpdateStrategy online_count_update_strategy = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setMusicInfo method defined in write_rpc_service.thrift
message SetMusicInfoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required MusicInfo music_info = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setSiteInfoList method defined in write_rpc_service.thrift
message SetSiteInfoListRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required SiteInfoList site_info_list = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setDoubanInfo method defined in write_rpc_service.thrift
message SetDoubanInfoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required DoubanInfo douban_info = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addFormat method defined in write_rpc_service.thrift
message AddFormatRequest {
  required User user = 1;

  // Format for episode
  message Info {
    required int64 entity_id = 1;
    repeated Format format = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteFormat method defined in write_rpc_service.thrift
message DeleteFormatRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string format_uuid = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addImageFormat method defined in write_rpc_service.thrift
message AddImageFormatRequest {
  required User user = 1;

  // Format for image
  message Info {
    required int64 entity_id = 1;
    repeated ImageFormat image_format = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteImageFormat method defined in write_rpc_service.thrift
message DeleteImageFormatRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string image_format_uuid = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setSingularFather method defined in write_rpc_service.thrift
message SetSingularFatherRequest {
  required User user = 1;

  // The column group of the fathers.
  // Only column groups in set {FATHER_ALBUM, FATHER_OFFICIAL_EPISODE,
  // FATHER_PPS_CATEGORY} are allowed.
  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    required FatherInfo father_info = 2;
  }
  repeated Info info = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setRepeatedFather method defined in write_rpc_service.thrift
message SetRepeatedFatherRequest {
  required User user = 1;

  // The column group of the fathers.
  // Only column groups in set {FATHER_COLLECTION, FATHER_UGC_COLLECTION,
  // FATHER_APP_GROUP, FATHER_VIDEO_GROUP} are allowed.
  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    repeated FatherInfo father_info = 2;
  }
  repeated Info info = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for addChildSummary method defined in write_rpc_service.thrift
message AddChildSummaryRequest {
  required User user = 1;

  // The column group of the children.
  // Only column groups in set {
  //   CHILD_PEOPLE,
  //   CHILD_IMAGE,
  //   CHILD_CSS,
  //   PPS_CATEGORY_CHILD,
  //   APP_COLLECTION_CHILD,
  //   CHILD_PREVUE // 预告片列表
  // } are allowed.
  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    repeated MetaSummary meta_summary = 2;
  }
  repeated Info info = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for deleteChildSummary method defined in write_rpc_service.thrift
message DeleteChildSummaryRequest {
  required User user = 1;

  // The column group of the children.
  // Only column groups in set {CHILD_EPISODE,CHILD_PEOPLE, CHILD_IMAGE, CHILD_CSS,
  // CHILD_PREVUE, CHILD_TRAILER, CHILD_TITBIT, CHILD_CLIP, CHILD_OTHER,
  // PPS_CATEGORY_CHILD, APP_COLLECTION_CHILD} are allowed.
  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    // IDs of children to be deleted.
    repeated int64 child_id = 2;
  }
  repeated Info info = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for addTag method defined in write_rpc_service.thrift
message AddTagRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string tag = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteTag method defined in write_rpc_service.thrift
message DeleteTagRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string tag = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addKeyValuePair method defined in write_rpc_service.thrift
message AddKeyValuePairRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated KeyValuePair key_value_pair = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteKeyValuePair method defined in write_rpc_service.thrift
message DeleteKeyValuePairRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string name = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addViewLink method defined in write_rpc_service.thrift
message AddViewLinkRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated ViewLink view_link = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteViewLink method defined in write_rpc_service.thrift
message DeleteViewLinkRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated ViewLink.ViewLinkName name = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addSubtitle method defined in write_rpc_service.thrift
message AddSubtitleRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated Subtitle subtitle = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteSubtitle method defined in write_rpc_service.thrift
message DeleteSubtitleRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string subtitle_uuid = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setMultiPublish method defined in write_rpc_service.thrift
message SetMultiPublishRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated MultiPublish multi_publish = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteMultiPublish method defined in write_rpc_service.thrift
message DeleteMultiPublishRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    // Only must the require fileds of MultiPublish.
    repeated MultiPublish multi_publish = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addResourceElements method defined in write_rpc_service.thrift
message AddResourceElementsRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated ResourceMetaSummary elements_meta_summary = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];

  // Only ColumnGroup in set
  // [RESOURCE_ELEMENTS_SUMMARY,SECONDARY_RESOURCE_ELEMENTS_SUMMARY] is allowed.
  optional ColumnGroup column_group = 5 [default = RESOURCE_ELEMENTS_SUMMARY];
}

// Proto for deleteResourceElements method defined in write_rpc_service.thrift
message DeleteResourceElementsRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated int64 elements_id = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];

  // Only ColumnGroup in set
  // [RESOURCE_ELEMENTS_SUMMARY,SECONDARY_RESOURCE_ELEMENTS_SUMMARY] is allowed.
  optional ColumnGroup column_group = 5 [default = RESOURCE_ELEMENTS_SUMMARY];
}

message SetIsResourceGroupRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required bool is_resource_group = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message SetResourceTypeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required ResourceContainer.ResourceType resource_type = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message SetFilmTvMetadataRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required knowledge.pub.library.FilmTvMetadata metadata = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message SetPlaySourceIdRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required string play_source_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message SetQipuIdRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 qipu_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message SetPosterRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required RelatedImage poster = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message SetMiniAutoClusterBaseRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required knowledge.graph.pub.MiniAutoClusterBase mini_auto_cluster_base = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message SetVoteInfoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required VoteInfo vote_info = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message SetCopyrightProtectionRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required CopyrightProtection copyright_protection = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message SetFingerprintRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required Fingerprint fingerprint = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message AddOtherImageRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated RelatedImage other_image = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

message DeleteOtherImageRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated int64 other_image_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addTvLiveStreamList method defined in write_rpc_service.thrift.
message AddTvLiveStreamListRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated TvLiveStreamList tv_live_stream_list = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteTvLiveStreamList method defined in write_rpc_service.thrift.
message DeleteTvLiveStreamListRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated int32 tv_channel_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addTvChannel method defined in write_rpc_service.thrift.
message AddTvChannelRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated TvChannel tv_channel = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteTvChannel method defined in write_rpc_service.thrift.
message DeleteTvChannelRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated int32 tv_channel_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addElectronicProgramGuide method defined in write_rpc_service.thrift.
message AddElectronicProgramGuideRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated ElectronicProgramGuide electronic_program_guide = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteElectronicProgramGuide method defined in write_rpc_service.thrift.
message DeleteElectronicProgramGuideRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated int32 program_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addTvLiveBase method defined in write_rpc_service.thrift.
message AddTvLiveBaseRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated TvLiveBase tv_live_base = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteTvLiveBase method defined in write_rpc_service.thrift.
message DeleteTvLiveBaseRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated int32 tv_channel_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addAppVersionChangeInfo method defined in write_rpc_service.thrift.
message AddAppVersionChangeInfoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated AppVersionChangeInfo app_version_change_info = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteAppVersionChangeInfo method defined in write_rpc_service.thrift.
message DeleteAppVersionChangeInfoRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string app_version_code = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addAlbumVideoData method defined in write_rpc_service.thrift.
message AddAlbumVideoDataRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated knowledge.graph.pub.AlbumVideoData related_album_video = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteAlbumVideoData method defined in write_rpc_service.thrift.
message DeleteAlbumVideoDataRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;

    /** The corresponding id of an entity's child, preferring to use qipu id,
      * if qipu id is "invalid", use doc_id instead.*/
    repeated string child_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteOptionField method defined in write_rpc_service.thrift.
message DeleteOptionFieldRequest {
  required User user = 1;

  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    // Do not need assignment.
    optional bool reserved = 2 [default = true];
  }
  repeated Info info = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for request of addAccessPlayControl method defined in write_rpc_service.thrift.
message AddAccessPlayControlRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated AccessPlayControl access_play_control = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];

  // 消息优先级
  optional Priority priority = 5;
}

// Proto for request of deleteAccessPlayControl method defined in write_rpc_service.thrift.
message DeleteAccessPlayControlRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated PlayPlatform play_platform = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addFeed method defined in write_rpc_service.thrift
message AddFeedRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated Feed feed = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteFeed method defined in write_rpc_service.thrift
message DeleteFeedRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated string source_provider = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setLiveChannelBase method defined in write_rpc_service.thrift
message SetLiveChannelBaseRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required LiveChannelBase live_channel_base = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setIsEnable method defined in write_rpc_service.thrift
message SetIsEnableRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required bool is_enable = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setDefaultLiveStream method defined in write_rpc_service.thrift
message SetDefaultLiveStreamRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required LiveStream default_live_stream = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addLiveStream method defined in write_rpc_service.thrift.
message AddLiveStreamRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated LiveStream live_stream = 2;
    }

    repeated Info info = 2;
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteLiveStream method defined in write_rpc_service.thrift.
message DeleteLiveStreamRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated string uuid = 2;
    }

    repeated Info info = 2;
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setLiveEpisodeMetadata method defined in write_rpc_service.thrift
message SetLiveEpisodeMetadataRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required LiveEpisodeMetadata metadata = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setLiveEpisodeBase method defined in write_rpc_service.thrift
message SetLiveEpisodeBaseRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required LiveEpisodeBase base = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setLiveEpisodeChargeInfo method defined in write_rpc_service.thrift
message SetLiveEpisodeChargeInfoRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required LiveEpisodeChargeInfo charge_info = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setLiveEpisodeChargeInfo method defined in write_rpc_service.thrift
message SetLiveSportsRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required LiveSports live_sports = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setCommodityBase method defined in write_rpc_service.thrift
message SetCommodityBaseRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required CommodityBase base = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setItemStat method defined in write_rpc_service.thrift
message SetItemStatRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required ItemStat stat = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setItemDescription method defined in write_rpc_service.thrift
message SetItemDescriptionRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required ItemDescription description = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setItemShelving method defined in write_rpc_service.thrift
message SetItemShelvingRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required ItemShelving shelving = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setItemAfterSale method defined in write_rpc_service.thrift
message SetItemAfterSaleRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required ItemAfterSale after_sale = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setItemShipment method defined in write_rpc_service.thrift
message SetItemShipmentRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required ItemShipment shipment = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addSku method defined in write_rpc_service.thrift.
message AddSkuRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated Sku sku = 2;
    }

    repeated Info info = 2;
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteSku method defined in write_rpc_service.thrift.
message DeleteSkuRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated int64 sku_id = 2;
    }

    repeated Info info = 2;
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setCommodityExtra method defined in write_rpc_service.thrift
message SetCommodityExtraRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required CommodityExtra extra = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setSpuBase method defined in write_rpc_service.thrift
message SetSpuBaseRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required SpuBase base = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addItemProperty method defined in write_rpc_service.thrift.
message AddItemPropertyRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated ItemProperty common_property = 2;
    }

    repeated Info info = 2;
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteItemProperty method defined in write_rpc_service.thrift.
message DeleteItemPropertyRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated int64 key_id = 2;
    }

    repeated Info info = 2;
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setItemBrandBase method defined in write_rpc_service.thrift
message SetItemBrandBaseRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required ItemBrandBase base = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setMainEpisode method defined in write_rpc_service.thrift
message SetMainEpisodeRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required MetaSummary main_epsiode = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setApprovalStatus method defined in write_rpc_service.thrift
message SetApprovalStatusRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required Commodity.Status approval_status = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setOnTheater method defined in write_rpc_service.thrift.
message SetOnTheaterRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required OnTheater on_theater = 2;
    }

    repeated Info info = 2;
    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setTheaterBase method defined in write_rpc_service.thrift.
message SetTheaterBaseRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required TheaterBase theater_base = 2;
    }

    repeated Info info = 2;
    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setRoute method defined in write_rpc_service.thrift.
message SetRouteRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required Route route = 2;
    }

    repeated Info info = 2;
    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setTheaterScore method defined in write_rpc_service.thrift.
message SetTheaterScoreRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required TheaterScore score = 2;
    }

    repeated Info info = 2;
    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setOpenning method defined in write_rpc_service.thrift.
message SetOpenningRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required string openning = 2;
    }

    repeated Info info = 2;
    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setRank method defined in write_rpc_service.thrift.
message SetRankRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required int32 rank = 2;
    }

    repeated Info info = 2;
    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setQiquTagMetadata method defined in write_rpc_service.thrift.
message SetQiquTagMetadataRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required QiquTagMetadata qipu_tag_metadata = 2;
    }

    repeated Info info = 2;
    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setQuality method defined in write_rpc_service.thrift.
message SetQualityRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required int32 quality = 2;
    }

    repeated Info info = 2;
    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setHot method defined in write_rpc_service.thrift.
message SetHotRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required float hot = 2;
    }

    repeated Info info = 2;
    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addRelatedTag method defined in write_rpc_service.thrift
message AddRelatedTagRequest {
    required User user = 1;

    // Format for episode
    message Info {
        required int64 entity_id = 1;
        repeated QiquTag.RelatedTag related_tag = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteRelatedTag method defined in write_rpc_service.thrift
message DeleteRelatedTagRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated int64 qiqu_tag_id = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setResultCheck method defined in write_rpc_service.thrift.
message SetResultCheckRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required ResultCheck result_check = 2;
    }

    repeated Info info = 2;
    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addQiquTagSummary method defined in write_rpc_service.thrift
message AddQiquTagSummaryRequest {
    required User user = 1;

    // Format for episode
    message Info {
        required int64 entity_id = 1;
        repeated QiquTagSummary qiqu_tag_summary = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteQiquTagSummary method defined in write_rpc_service.thrift
message DeleteQiquTagSummaryRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated int64 qiqu_tag_id = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addPpsCategoryRanking method defined in write_rpc_service.thrift
message AddPpsCategoryRankingRequest {
    required User user = 1;

    // Format for episode
    message Info {
        required int64 entity_id = 1;
        repeated PpsCategoryRanking pps_category_ranking = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deletePpsCategoryRanking method defined in write_rpc_service.thrift
message DeletePpsCategoryRankingRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        repeated int64 pps_category_id = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setEpisodeType method defined in write_rpc_service.thrift
message SetEpisodeTypeRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required EpisodeType episode_type = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setAutoPlaylistInfo method defined in write_rpc_service.thrift
message SetAutoPlaylistInfoRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required AutoPlaylistInfo auto_playlist_info = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setDetailPageUrl method defined in write_rpc_service.thrift
message SetDetailPageUrlRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required string detail_page_url = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setMonthlyDownloadCount method defined in write_rpc_service.thrift
message SetMonthlyDownloadCountRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required int64 monthly_download_count = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setUpdateFrequence method defined in write_rpc_service.thrift
message SetUpdateFrequenceRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required int32 update_frequence = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for addImageFormat method defined in write_rpc_service.thrift
message AddUpdateSourceRequest {
  required User user = 1;

  // Format for image
  message Info {
    required int64 entity_id = 1;
    repeated string update_source = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteImageFormat method defined in write_rpc_service.thrift
message DeleteUpdateSourceRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string update_source = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for addSeason method defined in write_rpc_service.thrift
message AddSeasonRequest {
  required User user = 1;

  // Format for image
  message Info {
    required int64 entity_id = 1;
    repeated Season season = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteSeason method defined in write_rpc_service.thrift
message DeleteSeasonRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated int32 order = 2;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteAllSeasons method defined in write_rpc_service.thrift
message DeleteAllSeasonsRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteAllTags method defined in write_rpc_service.thrift
message DeleteAllTagsRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}


// Proto for setTopicMetadata method defined in write_rpc_service.thrift
message SetTopicMetadataRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required TopicMetadata topic_metadata = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setShopBase method defined in write_rpc_service.thrift
message SetShopBaseRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required ShopBase base = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setShopLinkage method defined in write_rpc_service.thrift
message SetShopLinkageRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required ShopLinkage linkage = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setShopScore method defined in write_rpc_service.thrift
message SetShopScoreRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required ShopScore score = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setBulletin method defined in write_rpc_service.thrift
message SetBulletinRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required string bulletin = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setStatus method defined in write_rpc_service.thrift
message SetStatusRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required Shop.Status status = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setOcrTag method defined in write_rpc_service.thrift
message SetOcrTagRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required OcrTag ocr_tag = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setAsrTag method defined in write_rpc_service.thrift
message SetAsrTagRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required AsrTag asr_tag = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setSmartTag method defined in write_rpc_service.thrift
message SetSmartTagRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required SmartTag smart_tag = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for request of addTopicSummary method defined in write_rpc_service.thrift.
message AddTopicSummaryRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated TopicSummary topic_summary = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteTopicSummary method defined in write_rpc_service.thrift.
message DeleteTopicSummaryRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;

    // The corresponding id of an entity's child, preferring to use qipu id.
    repeated int64 topic_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addSpuChildSummary method defined in write_rpc_service.thrift.
message AddSpuChildSummaryRequest {
  required User user = 1;

  // The column group of the children.
  // Only column groups in set {CHILD_PEOPLE, CHILD_EPISODE,
  // CHILD_ALBUM} are allowed.
  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    repeated MetaSummary meta_summary = 2;
  }
  repeated Info info = 3;
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for request of deleteSpuChildSummary method defined in write_rpc_service.thrift.
message DeleteSpuChildSummaryRequest {
  required User user = 1;

  // The column group of the children.
  // Only column groups in set {CHILD_PEOPLE, CHILD_EPISODE,
  // CHILD_ALBUM} are allowed.
  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;

    // The corresponding id of an entity's child, preferring to use qipu id.
    repeated int64 child_id = 2;
  }
  repeated Info info = 3;
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for request of addCategorySummary method defined in write_rpc_service.thrift.
message AddCategorySummaryRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated CategorySummary category_summary = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteCategorySummary method defined in write_rpc_service.thrift.
message DeleteCategorySummaryRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;

    // The corresponding id of an entity's child, preferring to use qipu id.
    repeated int64 category_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setAdPointTag method defined in write_rpc_service.thrift
message SetAdPointTagRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required AdPointTag ad_point_tag = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setPageUrl method defined in write_rpc_service.thrift
message SetPageUrlRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required string page_url = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for request of addNotice method defined in write_rpc_service.thrift.
message AddNoticeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated Notice notice = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteNotice method defined in write_rpc_service.thrift.
message DeleteNoticeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;

    // The corresponding id of an entity's child, preferring to use qipu id.
    repeated int64 notice_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setRelatedVideos method defined in write_rpc_service.thrift.
message SetRelatedVideosRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required MetaSummaryList related_videos = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setRelatedCelebrities method defined in write_rpc_service.thrift.
message SetRelatedCelebritiesRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required MetaSummaryList related_celebrities = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addAliasName method defined in write_rpc_service.thrift.
message AddAliasNameRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string alias_name = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteAliasName method defined in write_rpc_service.thrift.
message DeleteAliasNameRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    // The corresponding id of an entity's child, preferring to use qipu id.
    repeated string alias_name = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setGrade method defined in write_rpc_service.thrift.
message SetGradeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int32 grade = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setRecommendRate method defined in write_rpc_service.thrift.
message SetRecommendRateRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int32 recommend_rate = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setRecommendRemark method defined in write_rpc_service.thrift.
message SetRecommendRemarkRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required string recommend_remark = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setUrl method defined in write_rpc_service.thrift.
message SetUrlRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required string url = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setCurrentPresenterId method defined in write_rpc_service.thrift.
message SetCurrentPresenterIdRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 current_presenter_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setShowStatus method defined in write_rpc_service.thrift.
message SetShowStatusRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required ShowRoom.ShowStatus show_status = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setStartTime method defined in write_rpc_service.thrift.
message SetStartTimeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 start_time = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setAudienceCount method defined in write_rpc_service.thrift.
message SetAudienceCountRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int32 audience_count = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setRoomType method defined in write_rpc_service.thrift.
message SetRoomTypeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required ShowRoom.RoomType room_type = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setGpaphPlaylistType method defined in write_rpc_service.thrift.
message SetGraphPlaylistTypeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required Collection.GraphPlaylistType graph_playlist_type = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setUpDownScore method defined in write_rpc_service.thrift.
message SetUpDownScoreRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required float up_down_score = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setSnsScore method defined in write_rpc_service.thrift.
message SetSnsScoreRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required float sns_score = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addAudioFormat method defined in write_rpc_service.thrift.
message AddAudioFormatRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated AudioFormat audio_format = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteAudioFormat method defined in write_rpc_service.thrift.
message DeleteAudioFormatRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;

    // The uuid of AudioFormat.
    repeated string uuid = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addPromotion method defined in write_rpc_service.thrift.
message AddPromotionRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated Promotion promotion = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deletePromotion method defined in write_rpc_service.thrift.
message DeletePromotionRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;

    // The promotion_id of Promotion.
    repeated int64 promotion_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for deleteAllImageFormat method defined in write_rpc_service.thrift
message DeleteAllImageFormatRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
  }
  repeated Info info = 2;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setChildSummaryList method defined in write_rpc_service.thrift
message SetChildSummaryListRequest {
  required User user = 1;

  // The column group of the children.
  required ColumnGroup column_group = 2;

  message Info {
    required int64 entity_id = 1;
    repeated MetaSummary child_summary = 2;
    optional string father_desc = 3;
  }
  required Info info = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for request of setFanCount method defined in write_rpc_service.thrift.
message SetFanCountRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 fan_count = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setLastLiveEndTime method defined in write_rpc_service.thrift.
message SetLastLiveEndTimeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 last_live_end_time = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setNextLiveStartTime method defined in write_rpc_service.thrift.
message SetNextLiveStartTimeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 next_live_start_time = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setCurrentLiveStartTime method defined in write_rpc_service.thrift.
message SetCurrentLiveStartTimeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 current_live_start_time = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setCurrentLiveEndTime method defined in write_rpc_service.thrift.
message SetCurrentLiveEndTimeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required int64 current_live_end_time = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addOwnedMetal method defined in write_rpc_service.thrift.
message AddOwnedMetalRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string owned_metal = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteOwnedMetal method defined in write_rpc_service.thrift.
message DeleteOwnedMetalRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated string owned_metal = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setShowRoomName method defined in write_rpc_service.thrift.
message SetShowRoomNameRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required string show_room_name = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addCommodityCategory method defined in write_rpc_service.thrift.
message AddCommodityCategoryRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated CommodityCategory commodity_category = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteCommodityCategory method defined in write_rpc_service.thrift.
message DeleteCommodityCategoryRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated int64 category_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setPanoFormat method defined in write_rpc_service.thrift.
message SetPanoFormatRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required PanoFormat pano_format = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of addCelebrityFigureOut method defined in write_rpc_service.thrift.
message AddCelebrityFigureOutRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated FigureOut celebrity_figure_out = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteCelebrityFigureOut method defined in write_rpc_service.thrift.
message DeleteCelebrityFigureOutRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated int64 figure_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setQualityScore method defined in write_rpc_service.thrift.
message SetQualityScoreRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required Quality quality = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setFestivalMetadata method defined in write_rpc_service.thrift.
message SetFestivalMetadataRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required FestivalMetadata metadata = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of setRegionType method defined in write_rpc_service.thrift.
message SetRegionTypeRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    required RegionType region_type = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setCollectionEvent method defined in write_rpc_service.thrift
message SetCollectionEventRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required Collection.Event event = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for request of addRelatedCharacter method defined in write_rpc_service.thrift.
message AddRelatedCharacterRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated CharacterSummary related_character = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for request of deleteRelatedCharacter method defined in write_rpc_service.thrift.
message DeleteRelatedCharacterRequest {
  required User user = 1;

  message Info {
    required int64 entity_id = 1;
    repeated int64 character_id = 2;
  }
  repeated Info info = 2;
  optional bool should_notify_audience = 3 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 4 [default = false];
}

// Proto for setOwnRoomId method defined in write_rpc_service.thrift
message SetOwnRoomIdRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required int64 own_room_id = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setOngoingRoomId method defined in write_rpc_service.thrift
message SetOngoingRoomIdRequest {
    required User user = 1;
    message Info {
        required int64 entity_id = 1;
        required int64 ongoing_room_id = 2;
    }

    repeated Info info = 2;

    // Whether to send message to activeMQ to notify audience. If you don't know
    // what exactly it is, leave it as default.
    optional bool should_notify_audience = 3 [default = true];

    // If you're doing a batch update,
    // please consider setting is_updated_in_batch_mode = true.
    // So the audience will know this is a batch update,
    // in which they may optimize the message processing.
    optional bool is_updated_in_batch_mode = 5 [default = false];
}

// Proto for setUgcEpisode method defined in write_rpc_service.thrift
message SetUgcEpisodeRequest {
  //option
  option (request_options).set_table = UGC_EPISODE_TABLE;
  option (request_options).set_interface = "setUgcEpisode";

  required User user = 1;

  optional UgcEpisode merge_ugc_episode = 2;

  optional UgcEpisode delete_ugc_episode = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setAlbum method defined in write_rpc_service.thrift
message SetAlbumRequest {
  //option
  option (request_options).set_table = ALBUM_TABLE;
  option (request_options).set_interface = "setAlbum";

  required User user = 1;

  optional Album merge_album = 2;

  optional Album delete_album = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;

  // 写入站点
  repeated SiteType site = 7;
}

// Proto for setEpisode method defined in write_rpc_service.thrift
message SetEpisodeRequest {
  //option
  option (request_options).set_table = EPISODE_TABLE;
  option (request_options).set_interface = "setEpisode";

  required User user = 1;

  optional Episode merge_episode = 2;

  optional Episode delete_episode = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;

  // 写入站点
  repeated SiteType site = 7;
}

// Proto for setCollection method defined in write_rpc_service.thrift
message SetCollectionRequest {
  //option
  option (request_options).set_table = COLLECTION_TABLE;
  option (request_options).set_interface = "setCollection";

  required User user = 1;

  optional Collection merge_collection = 2;

  optional Collection delete_collection = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setImage method defined in write_rpc_service.thrift
message SetImageRequest {
  //option
  option (request_options).set_table = IMAGE_TABLE;
  option (request_options).set_interface = "setImage";

  required User user = 1;

  optional Image merge_image = 2;

  optional Image delete_image = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setPeople method defined in write_rpc_service.thrift
message SetPeopleRequest {
  //option
  option (request_options).set_table = PEOPLE_TABLE;
  option (request_options).set_interface = "setPeople";

  required User user = 1;

  optional People merge_people = 2;

  optional People delete_people = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setCss method defined in write_rpc_service.thrift
message SetCssRequest {
  //option
  option (request_options).set_table = CSS_TABLE;
  option (request_options).set_interface = "setCss";

  required User user = 1;

  optional ClipSceneShot merge_css = 2;

  optional ClipSceneShot delete_css = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setVideoGroup method defined in write_rpc_service.thrift
message SetVideoGroupRequest {
  //option
  option (request_options).set_table = VIDEO_GROUP_TABLE;
  option (request_options).set_interface = "setVideoGroup";

  required User user = 1;

  optional VideoGroup merge_video_group = 2;

  optional VideoGroup delete_video_group = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setResourceContainer method defined in write_rpc_service.thrift
message SetResourceContainerRequest {
  //option
  option (request_options).set_table = RESOURCE_CONTAINER_TABLE;
  option (request_options).set_interface = "setResourceContainer";

  required User user = 1;

  optional ResourceContainer merge_resource_container = 2;

  optional ResourceContainer delete_resource_container = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setFilmTvLibrary method defined in write_rpc_service.thrift
message SetFilmTvLibraryRequest {
  //option
  option (request_options).set_table = FILM_TV_LIBRARY_TABLE;
  option (request_options).set_interface = "setFilmTvLibrary";

  required User user = 1;

  optional FilmTvLibrary merge_film_tv_library = 2;

  optional FilmTvLibrary delete_film_tv_library = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setOrganizationSharePartner method defined in write_rpc_service.thrift
message SetOrganizationSharePartnerRequest {
  //option
  option (request_options).set_table = ORGANIZATION_SHARE_PARTNER_TABLE;
  option (request_options).set_interface = "SetOrganizationSharePartnerRequest";

  required User user = 1;

  optional OrganizationSharePartner merge_organization_share_partner = 2;

  optional OrganizationSharePartner delete_organization_share_partner = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setUgcCollection method defined in write_rpc_service.thrift
message SetUgcCollectionRequest {
  //option
  option (request_options).set_table = UGC_COLLECTION_TABLE;
  option (request_options).set_interface = "setUgcCollection";

  required User user = 1;

  optional UgcCollection merge_ugc_collection = 2;

  optional UgcCollection delete_ugc_collection = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setAdsMaterial method defined in write_rpc_service.thrift
message SetAdsMaterialRequest {
  //option
  option (request_options).set_table = ADS_MATERIAL_TABLE;
  option (request_options).set_interface = "setAdsMaterial";

  required User user = 1;

  optional AdsMaterial merge_ads_material = 2;

  optional AdsMaterial delete_ads_material = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setTvLiveCenter method defined in write_rpc_service.thrift
message SetTvLiveCenterRequest {
  //option
  option (request_options).set_table = TV_LIVE_CENTER_TABLE;
  option (request_options).set_interface = "setTvLiveCenter";

  required User user = 1;

  optional TvLiveCenter merge_tv_live_center = 2;

  optional TvLiveCenter delete_tv_live_center = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setPpsCategory method defined in write_rpc_service.thrift
message SetPpsCategoryRequest {
  //option
  option (request_options).set_table = PPS_CATEGORY_TABLE;
  option (request_options).set_interface = "setPpsCategory";

  required User user = 1;

  optional PpsCategory merge_pps_category = 2;

  optional PpsCategory delete_pps_category = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setAppGroup method defined in write_rpc_service.thrift
message SetAppGroupRequest {
   //option
  option (request_options).set_table = APP_GROUP_TABLE;
  option (request_options).set_interface = "setAppGroup";

  required User user = 1;

  optional AppGroup merge_app_group = 2;

  optional AppGroup delete_app_group = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLiveChannel method defined in write_rpc_service.thrift
message SetLiveChannelRequest {
   //option
  option (request_options).set_table = LIVE_CHANNEL_TABLE;
  option (request_options).set_interface = "setLiveChannel";

  required User user = 1;

  optional LiveChannel merge_live_channel = 2;

  optional LiveChannel delete_live_channel = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLiveEpisode method defined in write_rpc_service.thrift
message SetLiveEpisodeRequest {
   //option
  option (request_options).set_table = LIVE_EPISODE_TABLE;
  option (request_options).set_interface = "setLiveEpisode";

  required User user = 1;

  optional LiveEpisode merge_live_episode = 2;

  optional LiveEpisode delete_live_episode = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setCommodity method defined in write_rpc_service.thrift
message SetCommodityRequest {
  //option
  option (request_options).set_table = COMMODITY_TABLE;
  option (request_options).set_interface = "setCommodity";

  required User user = 1;

  optional Commodity merge_commodity = 2;

  optional Commodity delete_commodity = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setSpu method defined in write_rpc_service.thrift
message SetSpuRequest {
  //option
  option (request_options).set_table = SPU_TABLE;
  option (request_options).set_interface = "setSpu";

  required User user = 1;

  optional Spu merge_spu = 2;

  optional Spu delete_spu = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setItemBrand method defined in write_rpc_service.thrift
message SetItemBrandRequest {
  //option
  option (request_options).set_table = ITEM_BRAND_TABLE;
  option (request_options).set_interface = "setItemBrand";

  required User user = 1;

  optional ItemBrand merge_item_brand = 2;

  optional ItemBrand delete_item_brand = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setTheater method defined in write_rpc_service.thrift
message SetTheaterRequest {
  //option
  option (request_options).set_table = THEATER_TABLE;
  option (request_options).set_interface = "setTheater";

  required User user = 1;

  optional Theater merge_theater = 2;

  optional Theater delete_theater = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setQiquTag method defined in write_rpc_service.thrift
message SetQiquTagRequest {
  //option
  option (request_options).set_table = QIQU_TAG_TABLE;
  option (request_options).set_interface = "setQiquTag";

  required User user = 1;

  optional QiquTag merge_qiqu_tag = 2;

  optional QiquTag delete_qiqu_tag = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setTopic method defined in write_rpc_service.thrift
message SetTopicRequest {
  //option
  option (request_options).set_table = TOPIC_TABLE;
  option (request_options).set_interface = "setTopic";

  required User user = 1;

  optional Topic merge_topic = 2;

  optional Topic delete_topic = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setShop method defined in write_rpc_service.thrift
message SetShopRequest {
  //option
  option (request_options).set_table = SHOP_TABLE;
  option (request_options).set_interface = "setShop";

  required User user = 1;

  optional Shop merge_shop = 2;

  optional Shop delete_shop = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setPresenter method defined in write_rpc_service.thrift
message SetPresenterRequest {
  //option
  option (request_options).set_table = PRESENTER_TABLE;
  option (request_options).set_interface = "setPresenter";

  required User user = 1;

  optional Presenter merge_presenter = 2;

  optional Presenter delete_presenter = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setShowRoom method defined in write_rpc_service.thrift
message SetShowRoomRequest {
  //option
  option (request_options).set_table = SHOW_ROOM_TABLE;
  option (request_options).set_interface = "setShowRoom";

  required User user = 1;

  optional ShowRoom merge_show_room = 2;

  optional ShowRoom delete_show_room = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setFestival method defined in write_rpc_service.thrift
message SetFestivalRequest {
  //option
  option (request_options).set_table = FESTIVAL_TABLE;
  option (request_options).set_interface = "setFestival";

  required User user = 1;

  optional Festival merge_festival = 2;

  optional Festival delete_festival = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setSpecialSubject method defined in write_rpc_service.thrift
message SetSpecialSubjectRequest {
  //option
  option (request_options).set_table = SPECIAL_SUBJECT_TABLE;
  option (request_options).set_interface = "setSpecialSubject";

  required User user = 1;

  optional SpecialSubject merge_special_subject = 2;

  optional SpecialSubject delete_special_subject = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setCharacter method defined in write_rpc_service.thrift
message SetCharacterRequest {
  //option
  option (request_options).set_table = CHARACTER_TABLE;
  option (request_options).set_interface = "setCharacter";

  required User user = 1;

  optional Character merge_character = 2;

  optional Character delete_character = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setTaxonomy method defined in write_rpc_service.thrift
message SetTaxonomyRequest {
  //option
  option (request_options).set_table = TAXONOMY_TABLE;
  option (request_options).set_interface = "setTaxonomy";

  required User user = 1;

  optional Taxonomy merge_taxonomy = 2;

  optional Taxonomy delete_taxonomy = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setGraphEntity method defined in write_rpc_service.thrift
message SetGraphEntityRequest {
  //option
  option (request_options).set_table = GRAPH_ENTITY_TABLE;
  option (request_options).set_interface = "setGraphEntity";

  required User user = 1;

  optional GraphEntity merge_graph_entity = 2;

  optional GraphEntity delete_graph_entity = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setBook method defined in write_rpc_service.thrift
message SetBookRequest {
  //option
  option (request_options).set_table = BOOK_TABLE;
  option (request_options).set_interface = "setBook";

  required User user = 1;

  optional Book merge_book = 2;

  optional Book delete_book = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setBookVolume method defined in write_rpc_service.thrift
message SetBookVolumeRequest {
  //option
  option (request_options).set_table = BOOK_VOLUME_TABLE;
  option (request_options).set_interface = "setBookVolume";

  required User user = 1;

  optional BookVolume merge_book_volume = 2;

  optional BookVolume delete_book_volume = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setBookChapter method defined in write_rpc_service.thrift
message SetBookChapterRequest {
  //option
  option (request_options).set_table = BOOK_CHAPTER_TABLE;
  option (request_options).set_interface = "setBookChapter";

  required User user = 1;

  optional BookChapter merge_book_chapter = 2;

  optional BookChapter delete_book_chapter = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setCategory method defined in write_rpc_service.thrift
message SetCategoryRequest {
  //option
  option (request_options).set_table = CATEGORY_TABLE;
  option (request_options).set_interface = "setCategory";

  required User user = 1;

  optional Category merge_category = 2;

  optional Category delete_category = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setFestivalSeries method defined in write_rpc_service.thrift
message SetFestivalSeriesRequest {
  //option
  option (request_options).set_table = FESTIVAL_SERIES_TABLE;
  option (request_options).set_interface = "setFestivalSeries";

  required User user = 1;

  optional FestivalSeries merge_festival_series = 2;

  optional FestivalSeries delete_festival_series = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setFestivalAward method defined in write_rpc_service.thrift
message SetFestivalAwardRequest {
  //option
  option (request_options).set_table = FESTIVAL_AWARD_TABLE;
  option (request_options).set_interface = "setFestivalAward";

  required User user = 1;

  optional FestivalAward merge_festival_award = 2;

  optional FestivalAward delete_festival_award = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setOperationTip method defined in write_rpc_service.thrift
message SetOperationTipRequest {
  //option
  option (request_options).set_table = OPERATION_TIP_TABLE;
  option (request_options).set_interface = "setOperationTip";

  required User user = 1;

  optional OperationTip merge_operation_tip = 2;

  optional OperationTip delete_operation_tip = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setCircle method defined in write_rpc_service.thrift
message SetPaopaoRequest {
  //option
  option (request_options).set_table = PAOPAO_TABLE;
  option (request_options).set_interface = "setPaopao";

  required User user = 1;

  optional Paopao merge_paopao = 2;

  optional Paopao delete_Paopao = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setCircle method defined in write_rpc_service.thrift
message SetCircleRequest {
  //option
  option (request_options).set_table = CIRCLE_TABLE;
  option (request_options).set_interface = "setCircle";

  required User user = 1;

  optional Circle merge_circle = 2;

  optional Circle delete_circle = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setCircleFeed method defined in write_rpc_service.thrift
message SetCircleFeedRequest {
  //option
  option (request_options).set_table = CIRCLE_FEED_TABLE;
  option (request_options).set_interface = "setCircleFeed";

  required User user = 1;

  optional CircleFeed merge_circle_feed = 2;

  optional CircleFeed delete_circle_feed = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setBookAuthor method defined in write_rpc_service.thrift
message SetBookAuthorRequest {
  //option
  option (request_options).set_table = BOOK_AUTHOR_TABLE;
  option (request_options).set_interface = "setBookAuthor";

  required User user = 1;

  optional BookAuthor merge_book_author = 2;

  optional BookAuthor delete_book_author = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setEvent method defined in write_rpc_service.thrift
message SetEventRequest {
  //option
  option (request_options).set_table = EVENT_TABLE;
  option (request_options).set_interface = "setEvent";

  required User user = 1;

  optional Event merge_event = 2;

  optional Event delete_event = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setCompetition method defined in write_rpc_service.thrift
message SetCompetitionRequest {
  //option
  option (request_options).set_table = COMPETITION_TABLE;
  option (request_options).set_interface = "setCompetition";

  required User user = 1;

  optional Competition merge_competition = 2;

  optional Competition delete_competition = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setMatch method defined in write_rpc_service.thrift
message SetMatchRequest {
  //option
  option (request_options).set_table = MATCH_TABLE;
  option (request_options).set_interface = "setMatch";

  required User user = 1;

  optional Match merge_match = 2;

  optional Match delete_match = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setCircleFeedComment method defined in write_rpc_service.thrift
message SetCircleFeedCommentRequest {
  //option
  option (request_options).set_table = CIRCLE_FEED_COMMENT_TABLE;
  option (request_options).set_interface = "setCircleFeedComment";

  required User user = 1;

  optional CircleFeedComment merge_circle_feed_comment = 2;

  optional CircleFeedComment delete_circle_feed_comment = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setComicBook method defined in write_rpc_service.thrift
message SetComicBookRequest {
  //option
  option (request_options).set_table = COMIC_BOOK_TABLE;
  option (request_options).set_interface = "setComicBook";

  required User user = 1;

  optional ComicBook merge_comic_book = 2;

  optional ComicBook delete_comic_book = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setComicBookChapter method defined in write_rpc_service.thrift
message SetComicBookChapterRequest {
  //option
  option (request_options).set_table = COMIC_BOOK_CHAPTER_TABLE;
  option (request_options).set_interface = "setComicBookChapter";

  required User user = 1;

  optional ComicBookChapter merge_comic_book_chapter = 2;

  optional ComicBookChapter delete_comic_book_chapter = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setBookContentProvider method defined in write_rpc_service.thrift
message SetContentProviderRequest {
  //option
  option (request_options).set_table = CONTENT_PROVIDER_TABLE;
  option (request_options).set_interface = "setContentProvider";

  required User user = 1;

  optional ContentProvider merge_content_provider = 2;

  optional ContentProvider delete_content_provider = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setSubjectPage method defined in write_rpc_service.thrift
message SetSubjectPageRequest {
  //option
  option (request_options).set_table = SUBJECT_PAGE_TABLE;
  option (request_options).set_interface = "setSubjectPage";

  required User user = 1;

  optional SubjectPage merge_subject_page = 2;

  optional SubjectPage delete_subject_page = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setPaopaoActivity method defined in write_rpc_service.thrift
message SetPaopaoActivityRequest {
  //option
  option (request_options).set_table = PAOPAO_ACTIVITY_TABLE;
  option (request_options).set_interface = "setPaopaoActivity";

  required User user = 1;

  optional PaopaoActivity merge_paopao_activity = 2;

  optional PaopaoActivity delete_paopao_activity = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setPaopaoCollection method defined in write_rpc_service.thrift
message SetPaopaoCollectionRequest {
  //option
  option (request_options).set_table = PAOPAO_COLLECTION_TABLE;
  option (request_options).set_interface = "setPaopaoCollection";

  required User user = 1;

  optional PaopaoCollection merge_paopao_collection = 2;

  optional PaopaoCollection delete_paopao_collection = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setPIntellectualProperty method defined in write_rpc_service.thrift
message SetIntellectualPropertyRequest {
  //option
  option (request_options).set_table = INTELLECTUAL_PROPERTY_TABLE;
  option (request_options).set_interface = "setIntellectualProperty";

  required User user = 1;

  optional IntellectualProperty merge_intellectual_property = 2;

  optional IntellectualProperty delete_intellectual_property = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}


// Proto for setHeadLine method defined in write_rpc_service.thrift
message SetHeadLineRequest {
  //option
  option (request_options).set_table = HEAD_LINE_TABLE;
  option (request_options).set_interface = "setHeadLine";

  required User user = 1;

  optional HeadLine merge_head_line = 2;

  optional HeadLine delete_head_line = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setHotEvent method defined in write_rpc_service.thrift
message SetHotEventRequest {
  //option
  option (request_options).set_table = HOT_EVENT_TABLE;
  option (request_options).set_interface = "setHotEvent";

  required User user = 1;

  optional HotEvent merge_hot_event = 2;

  optional HotEvent delete_hot_event = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setOpenRichMedia method defined in write_rpc_service.thrift
message SetOpenRichMediaRequest {
  //option
  option (request_options).set_table = OPEN_RICH_MEDIA_TABLE;
  option (request_options).set_interface = "setOpenRichMedia";

  required User user = 1;

  optional OpenRichMedia merge_open_rich_media = 2;

  optional OpenRichMedia delete_open_rich_media = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}


// Proto for setPeopleImage method defined in write_rpc_service.thrift
message SetPeopleImageRequest {
  //option
  option (request_options).set_table = PEOPLE_IMAGE_TABLE;
  option (request_options).set_interface = "setPeopleImage";

  required User user = 1;

  optional PeopleImage merge_people_image = 2;

  optional PeopleImage delete_people_image = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setVideoFormat method defined in write_rpc_service.thrift
message SetVideoFormatRequest {
  //option
  option (request_options).set_table = VIDEO_FORMAT_TABLE;
  option (request_options).set_interface = "setVideoFormat";

  required User user = 1;

  optional VideoFormat merge_video_format = 2;

  optional VideoFormat delete_video_format = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setMultiPublishEpisode method defined in write_rpc_service.thrift
message SetMultiPublishEpisodeRequest {
  //option
  option (request_options).set_table = MULTI_PUBLISH_EPISODE_TABLE;
  option (request_options).set_interface = "setMultiPublishEpisode";

  required User user = 1;

  optional MultiPublishEpisode merge_multi_publish_episode = 2;

  optional MultiPublishEpisode delete_multi_publish_episode = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setMultiPublishAlbum method defined in write_rpc_service.thrift
message SetMultiPublishAlbumRequest {
  //option
  option (request_options).set_table = MULTI_PUBLISH_ALBUM_TABLE;
  option (request_options).set_interface = "setMultiPublishAlbum";

  required User user = 1;

  optional MultiPublishAlbum merge_multi_publish_album = 2;

  optional MultiPublishAlbum delete_multi_publish_album = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLiveRoom method defined in write_rpc_service.thrift
message SetLiveRoomRequest {
  //option
  option (request_options).set_table = LIVE_ROOM_TABLE;
  option (request_options).set_interface = "setLiveRoom";

  required User user = 1;

  optional LiveRoom merge_live_room = 2;

  optional LiveRoom delete_live_room = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setImageAlbum method defined in write_rpc_service.thrift
message SetImageAlbumRequest {
  //option
  option (request_options).set_table = IMAGE_ALBUM_TABLE;
  option (request_options).set_interface = "setImageAlbum";

  required User user = 1;

  optional ImageAlbum merge_image_album = 2;

  optional ImageAlbum delete_image_album = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setHeadLineAlbum method defined in write_rpc_service.thrift
message SetHeadLineAlbumRequest {
  //option
  option (request_options).set_table = HEAD_LINE_ALBUM_TABLE;
  option (request_options).set_interface = "setHeadLineAlbum";

  required User user = 1;

  optional HeadLineAlbum merge_head_line_album = 2;

  optional HeadLineAlbum delete_head_line_album = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setGameActivity method defined in write_rpc_service.thrift
message SetGameActivityRequest {
  //option
  option (request_options).set_table = GAME_ACTIVITY_TABLE;
  option (request_options).set_interface = "setGameActivity";

  required User user = 1;

  optional GameActivity merge_game_activity = 2;
  optional GameActivity delete_game_activity = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setIqiyiUser method defined in write_rpc_service.thrift
message SetIqiyiUserRequest {
  //option
  option (request_options).set_table = IQIYI_USER_TABLE;
  option (request_options).set_interface = "setIqiyiUser";

  required User user = 1;

  optional IqiyiUser merge_iqiyi_user = 2;
  optional IqiyiUser delete_iqiyi_user = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLightNovel method defined in write_rpc_service.thrift
message SetLightNovelRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_TABLE;
  option (request_options).set_interface = "setLightNovel";

  required User user = 1;

  optional LightNovel merge_light_novel = 2;
  optional LightNovel delete_light_novel = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLightNovelVolume method defined in write_rpc_service.thrift
message SetLightNovelVolumeRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_VOLUME_TABLE;
  option (request_options).set_interface = "setLightNovelVolume";

  required User user = 1;

  optional LightNovelVolume merge_light_novel_volume = 2;
  optional LightNovelVolume delete_light_novel_volume = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLightNovelChapter method defined in write_rpc_service.thrift
message SetLightNovelChapterRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_CHAPTER_TABLE;
  option (request_options).set_interface = "setLightNovelChapter";

  required User user = 1;

  optional LightNovelChapter merge_light_novel_chapter = 2;
  optional LightNovelChapter delete_light_novel_chapter = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLiveAct method defined in write_rpc_service.thrift
message SetLiveActRequest {
  //option
  option (request_options).set_table = LIVE_ACT_TABLE;
  option (request_options).set_interface = "setLiveAct";

  required User user = 1;

  optional LiveAct merge_live_act = 2;
  optional LiveAct delete_live_act = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setPizzaVideo method defined in write_rpc_service.thrift
message SetPizzaVideoRequest {
  //option
  option (request_options).set_table = PIZZA_VIDEO_TABLE;
  option (request_options).set_interface = "setPizzaVideo";

  required User user = 1;

  optional PizzaVideo merge_pizza_video = 2;
  optional PizzaVideo delete_pizza_video = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

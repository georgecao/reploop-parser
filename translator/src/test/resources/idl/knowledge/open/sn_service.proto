// Author: Jianbing Zhang (zhangjianbing@qiyi.com)
//
// Proto definitions for id request and response of Id PRC server.
//

import "knowledge/pub/common.proto";

package knowledge.open;

//
// Definition of SN Request
//
message SNServiceRequest {
    required knowledge.pub.User user = 1;

    optional string type_name_space = 2;

    optional string type_name = 3;

    // How many ids he wants, if what he required exceed what we configured,
    // then will ignore this value.
    optional int32 num_of_ids = 4 [default = 1];
}

//
// Definition of SN Response
//
message SNServiceResponse {
    // RpcStatusInfo defined in Common.proto
    required knowledge.pub.RpcStatusInfo rpc_status_info = 1;

    // The arrange of ids returned
    repeated int64 new_ids_long = 2;
}


message SNRegisterRequest {
    required knowledge.pub.User user = 1;

    // 用于区分不同业务方的使用场景,避免类型名称冲突,例如lego
    optional string type_name_space = 2;

    optional string type_name = 3;

    optional SNTypeInfo type_info = 4;

    message SNTypeInfo {
         optional string suffix = 1;
         optional int64 initial_value_long = 2;
         optional Type type = 4;
         enum Type {
             LONG = 1;
         }
         optional GeneratorType generator_type = 5 [default = UNIQUE];
         enum GeneratorType {
           // 唯一
           UNIQUE = 0;
           // 严格递增
           STRICTLY_INCREASING = 1;
         }
    }
}

//
// Definition of SN Response
//
message SNRegisterResponse {
    // RpcStatusInfo defined in Common.proto
    required knowledge.pub.RpcStatusInfo rpc_status_info = 1;
}

message SNFindTypeInfoRequest {
    required knowledge.pub.User user = 1;

    // 用于区分不同业务方的使用场景,避免类型名称冲突,例如lego
    optional string type_name_space = 2;

    optional string type_name = 3;
}

message SNFindTypeInfoResponse {
    // RpcStatusInfo defined in Common.proto
    required knowledge.pub.RpcStatusInfo rpc_status_info = 1;
    optional SNRegisterRequest.SNTypeInfo type_info = 2;
}
// Author: Qi Qiao (qiaoqi@qiyi.com)

import "knowledge/pub/common.proto";

package knowledge.pub;

// Proto definitions for notifying activemq
message NotificationMessage {
  required int64 id = 1;
  required int64 timestamp = 2;
  repeated ColumnGroup columngroup = 3;

  // Only when all operation related to the whole columngroup is batched, then
  // this field is set to be true;
  optional bool is_updated_in_batch_mode = 4 [default = false];

  // 消息优先级
  optional Priority priority = 5;
  // 修改人账号.
  optional string updater = 6;
  
  // 写入的session_id,便于业务方跟踪消息写入情况
  repeated int64 session_id = 7;

  //标记repeated字段的key
  repeated ListUpdateInfo list_update_info = 8;

  repeated MultiLanguageFieldsUpdateInfo multi_language_update_info = 9;

  repeated SiteType site_type = 10;

  // 异步写入结果，仅异步写入此字段有值
  optional AsyncWriteResult async_write_result = 11;
}

// 异步写入结果Message定义
message AsyncWriteResult {
  // merge_entity
  optional bytes merge_entity = 12;

  // delete_entity
  optional bytes delete_entity = 13;

  // AsyncWrite result
  optional RpcStatusInfo rpc_status_info = 14;
}

// 多语言字段更新信息
message MultiLanguageFieldsUpdateInfo {
  optional ColumnGroup columngroup = 1;

  // columnGroup 中 变更值的语言列表
  repeated Language language = 2;
}

message ListUpdateInfo {
  optional ColumnGroup columngroup = 1;
  //repeated字段变更的key列表
  repeated string updated_key = 2;
}

message ActiveMqPluginConfig {
  required int64 timestamp = 1;
  repeated QueueConfig queue_config = 2;
  // 由服务器修改，设置是否更新成功
  optional bool success = 3 [default = false];
  // 由服务器修改，返回更新相关信息
  optional string updater_info = 4;

  optional CommandType command_type = 5 [default = QUEUE_CONFIG_UPDATE];
  // 命令类型
  enum CommandType {
    UNKNOWN_COMMAND_TYPE = -1;
    // 更新MQ队列配置
    QUEUE_CONFIG_UPDATE = 1;
    // 获取服务器MQ队列配置
    QUEUE_CONFIG_PULL = 2;
    // 检查MQ队列状态
    QUEUE_STATUS_CHECK = 3;
    // 更新MQ队列阻塞状态
    QUEUE_BLOCK_UPDATE = 4;
  }

  // 插件全局/默认配置
  optional PluginConfig plugin_config = 6;

  // 队列状态
  repeated QueueStatus queue_status = 7;
}

message PluginConfig {
  // MQ消息熔断阈值
  optional int32 default_block_count = 1 [default = -1];
  // MQ消息解除熔断比例,当堆积消息降低到阈值的该比例后解除熔断
  optional float default_unblock_ratio = 2 [default = 0.8];
}
message QueueConfig {
  //队列名
  required string queue_name = 1;
  optional FilterPriority filter_priority = 2;
  optional FilterIdType filter_id_type = 3;
  optional FilterColumn filter_column = 4;
  optional FilterUpdater filter_updater = 5;
  optional FilterMode filter_mode = 6;
  // MQ消息熔断阈值
  optional int32 block_count = 7;
  // MQ消息解除熔断比例,当堆积消息降低到阈值的该比例后解除熔断
  optional float unblock_ratio = 8;
}

// 队列状态
message QueueStatus {
  // 队列名
  optional string queue_name = 1;
  // 队列积压消息数量
  optional int32 pending_count = 2;
  // consumer数量
  optional int32 consumer_count = 3;
  // 队列是否熔断
  optional bool is_blocked = 4 [default = false];
}

message FilterPriority {
  // 优先级
  repeated Priority priority = 1;
  optional bool reverse = 2 [default = false];
}

message FilterIdType {
  // ID类型
  repeated int32 id_type = 1;
  optional bool reverse = 2 [default = false];
}

message FilterColumn {
  // columngroup类型（保存枚举对应的int值,在knowledge-sdk-java更新的情况下可以解析新枚举值）
  repeated int32 column_group_value = 1;
  optional bool reverse = 2 [default = false];
}

message FilterUpdater {
  // 发送方
  repeated string updater = 1;
  optional bool reverse = 2 [default = false];
}

message FilterMode {
  // batch/product
  optional bool batch = 1 [default = true];
  optional bool product = 2 [default = true];
}

message ActiveMqPluginMessage {
  required int64 id = 1;
  required int64 timestamp = 2;
  // 使用int解析columngroup枚举，避免频繁更新MQ服务器knowledge-sdk-java包
  repeated int32 columngroup = 3;

  // Only when all operation related to the whole columngroup is batched, then
  // this field is set to be true;
  optional bool is_updated_in_batch_mode = 4 [default = false];

  // 消息优先级
  optional Priority priority = 5;
  // 修改人账号.
  optional string updater = 6;
  
  // 写入的session_id,便于业务方跟踪消息写入情况
  repeated int64 session_id = 7;

}

// kafka对外消息，entity中是修改结果的entity
message BatchUpdateMessage {
  required int64 id = 1;
  required int64 timestamp = 2;
  // 处理的实体属性.
  optional bytes entity = 3;
  // 修改人账号.
  optional string updater = 4;
  // 写入的session_id,便于业务方跟踪消息写入情况
  optional string session_uuid = 5;
}
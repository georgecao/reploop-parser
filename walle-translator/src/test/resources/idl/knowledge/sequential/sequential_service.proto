// Author: Jianbing Zhang (zhangjianbing@qiyi.com)
//
// Proto definitions for id request and response of Id PRC server.
//

import "knowledge/pub/common.proto";
import "knowledge/pub/qipu_options.proto";

package knowledge.open;

// The definition of request for read entity.
message ReadSequentialRequest {
  option (knowledge.pub.service_message_options).method_name = "read";
  option (knowledge.pub.service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional string entity_id = 2;
  optional string version = 3;
}

// The definition of response for read entity.
message ReadSequentialResponse {
  option (knowledge.pub.service_message_options).method_name = "read";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatusInfo rpc_status_info = 1;

  // Response for request of entity
  optional string entity_id = 2;
  optional bytes entity_bytes = 3;
}

// Proto for return type of methods defined in seq_rpc_service.thrift
message WriteSequentialResponse {
  option (knowledge.pub.service_message_options).method_name = "write";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatusInfo rpc_status_info = 1;
}

// Proto for setEntity method defined in seq_rpc_service.thrift
message WriteSequentialRequest {
  option (knowledge.pub.service_message_options).method_name = "write";
  option (knowledge.pub.service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;

  optional string entity_id = 2;

  optional bytes entity = 3;

  optional string version = 4;
}

// Proto for return type of methods finish
message ReleaseVersionResponse {
  option (knowledge.pub.service_message_options).method_name = "releaseVersion";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatusInfo rpc_status_info = 1;
}

message ReleaseVersionRequest {
  option (knowledge.pub.service_message_options).method_name = "releaseVersion";
  option (knowledge.pub.service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional string id_type = 2;
  repeated int32 field_num = 3;
  optional string version = 4;
}

// Proto for return type of methods defined in seq_rpc_service.thrift
message RegisterVersionResponse {
  option (knowledge.pub.service_message_options).method_name = "registerVersion";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatusInfo rpc_status_info = 1;
}

// Proto for setEntity method defined in seq_rpc_service.thrift
message RegisterVersionRequest {
  option (knowledge.pub.service_message_options).method_name = "registerVersion";
  option (knowledge.pub.service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional string id_type = 2;
  repeated int32 field_num = 3;
  optional string version = 4;
}

// Proto for return type of methods defined in seq_rpc_service.thrift
message FindLatestVersionResponse {
  option (knowledge.pub.service_message_options).method_name = "findLatestVersion";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatusInfo rpc_status_info = 1;
  repeated VersionInfo version_info = 2;
  message VersionInfo {
    optional int32 field_num = 1;
    optional int64 timestamp = 2;
    optional string version = 3;
  }
}

// Proto for setEntity method defined in seq_rpc_service.thrift
message FindLatestVersionRequest {
  option (knowledge.pub.service_message_options).method_name = "findLatestVersion";
  option (knowledge.pub.service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional string id_type = 2;
  repeated int32 field_num = 3;
}
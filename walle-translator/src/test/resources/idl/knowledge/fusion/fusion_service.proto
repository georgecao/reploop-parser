// Author: Jiannan Tan (tanjiannan@qiyi.com)
//
// Proto definitions for rpc requests and responses for accessing the fusion service.

import "knowledge/pub/common.proto";
import "knowledge/pub/metadatas.proto";
import "knowledge/pub/knowledge.proto";
import "knowledge/graph/pub/properties.proto";
import "search/common/proto/library.proto";
import "search/serving/mixer.proto";
import "knowledge/pub/qipu_options.proto";
import "knowledge/fusion/query/properties.proto";
import "knowledge/graph/pub/graph_service.proto";
import "knowledge/fusion/query/query_service.proto";

package knowledge.pub;

message GetVideoPrevuesRequest {
  option (knowledge.pub.service_message_options).method_name = "getVideoPrevues";
  option (knowledge.pub.service_message_options).type = REQUEST;

  required knowledge.pub.User user = 1;
  required int64 entity_id = 2;
  optional bool include_prevue_entity = 3 [default = false];
  repeated knowledge.pub.ColumnGroup include_columns = 4;
  optional int32 from = 5 [default = 0];
  optional int32 size = 6 [default = 20];
  optional bool is_must = 7 [default = false];

  // 用于区分电影频道还是电视剧频道；
  // 如果是电视剧频道，返回结果中除了包含预告片，还要包含片花
  enum CategoryType {
      UNKNOWN = -1;
      FILM = 0;     //电影
      TV = 1;       //电视剧
      COMIC = 2;    //动漫
      VARIETY = 3;  //综艺
  }
  optional CategoryType category_type = 8;
  optional string site_ban = 9;
  optional SiteType iqiyi_site = 10 [default = SITE_ZH];
  repeated Language iqiyi_language = 11;
}

message GetVideoPrevuesResponse {
  option (knowledge.pub.service_message_options).method_name = "getVideoPrevues";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;

  repeated knowledge.pub.MetaSummary prevue_summary = 3;
  optional search.serving.MixerResponse search_result = 4;
  repeated knowledge.pub.Episode prevues = 5;
  optional int32 total_count = 6;
}

message GetVideoPlaySourcesRequest {
  option (knowledge.pub.service_message_options).method_name = "getVideoPlaySources";
  option (knowledge.pub.service_message_options).type = REQUEST;

  required knowledge.pub.User user = 1;
  repeated int64 entity_id = 2;
  optional bool include_pps = 3 [default = false];
  optional bool first_only = 4 [default = false];
  optional string site = 5;
  // Default platform is 3: PPS client
  // Reason: this param is added after PPS client using
  optional int32 platform = 6 [default = 3];
  repeated int64 film_tv_lib_id = 7;
  optional string site_ban = 8;
  optional SiteType iqiyi_site = 9 [default = SITE_ZH];
  repeated Language iqiyi_language = 10;

}

message GetVideoPlaySourcesResponse {
  option (knowledge.pub.service_message_options).method_name = "getVideoPlaySources";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;

  optional int32 total_video_count = 3;
  repeated search.indexing.pub.PlaySource play_source = 4;
}

message GetRelatedVideosOfCelebrityRequest {
  option (knowledge.pub.service_message_options).method_name = "getRelatedVideosOfCelebrity";
  option (knowledge.pub.service_message_options).type = REQUEST;

  required knowledge.pub.User user = 1;
  repeated int64 entity_id = 2;

  // The from of start point begins with 0.
  optional int32 from = 6 [default = 0];
  optional int32 size = 3 [default = 5];

  optional knowledge.graph.pub.RankingPolicy ranking_policy = 4 [default = PUBLISH_TIME];

  // If you specify some channel ids here,
  // we will only return the works of those channels.
  // If not, we will return works of all channels.
  repeated int32 channel_id = 5;

  optional bool include_film_tv_lib = 7 [default = false];

  // only qiyi produced flag, if it is true, filter out the non-qiyi produced album
  optional bool only_qiyi_produced = 8 [default = false];

  repeated string include_role = 9;
  repeated string exclude_role = 10;

  // If true, will return film_tv_category for related entities
  optional bool include_category_info = 11 [default = false];

  // If true, will return film_tv_category for related entities
  optional bool include_tag_info = 12 [default = false];

  // If true, will keep film_tv_lib instead of album/episode if they have the same title
  optional bool film_tv_lib_first = 13 [default = false];

  // If true, will remove Albums from response
  optional bool exclude_album = 14 [default = false];

  // If true, will include qipu entity info in response
  optional bool include_entity = 15 [default = false];

  // Columns of entities that user want to include in response
  repeated knowledge.pub.ColumnGroup entity_columns = 16;

  // NOTE: this function is moved to GetFilmTvLibPlaySource
  optional bool include_film_tv_play_source = 17 [deprecated = true];

  // NOTE: this function is moved to GetFilmTvLibPlaySource
  optional bool filter_pps_play_source = 18 [deprecated = true];

  // If true, will return all child videos of albums
  optional bool include_child_data = 19 [default = false];

  // 调用方的平台类型和IP地址，用于播控过滤
  optional knowledge.graph.pub.CallerInfo caller_info = 20;

  // If true, will only return videos with role info
  optional bool filter_no_roles = 21 [default = false];
}

message GetRelatedVideosOfCelebrityResponse {
  option (knowledge.pub.service_message_options).method_name = "getRelatedVideosOfCelebrity";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;

  repeated knowledge.graph.pub.AlbumVideoData related_entity = 3;
  optional int64 total_count = 4;
}

message GetRelatedCelebritiesOfCelebrityRequest {
  option (knowledge.pub.service_message_options).method_name = "getRelatedCelebritiesOfCelebrity";
  option (knowledge.pub.service_message_options).type = REQUEST;

  required knowledge.pub.User user = 1;

  // Used to identify one person id.
  repeated int64 entity_id = 2;

  optional int32 from = 4 [default = 0];
  optional int32 size = 3 [default = 6];

  // 是否在返回结果中包含被查询明星自己的信息
  optional bool include_self_info = 5 [default = false];

  optional SiteType iqiyi_site = 6 [default = SITE_ZH];
  repeated Language iqiyi_language = 7;
}

message GetRelatedCelebritiesOfCelebrityResponse {
  option (knowledge.pub.service_message_options).method_name = "getRelatedCelebritiesOfCelebrity";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;

  optional knowledge.graph.pub.CelebrityDataList related_celebrity = 3;
  optional int32 total_count = 4;

  // 被查询的明星本人的信息
  optional knowledge.graph.pub.CelebrityDataList self_info = 5;
}

message GetDspVideosRequest {
  option (knowledge.pub.service_message_options).method_name = "getDspVideos";
  option (knowledge.pub.service_message_options).type = REQUEST;

  required knowledge.pub.User user = 1;

  optional int32 from = 2[default = 0];
  optional int32 size = 3[default = 10];

  optional SiteType iqiyi_site = 4 [default = SITE_ZH];
  repeated Language iqiyi_language = 5;
}

message GetDspVideosResponse {
  option (knowledge.pub.service_message_options).method_name = "getDspVideos";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;

  optional int64 total = 3;

  // Query service查询结果.
  repeated knowledge.pub.query.QueryHit hit = 4;
}

message QueryGraphCollectionsByQiyiPublishDateRequest {
  option (knowledge.pub.service_message_options).method_name = "queryGraphCollectionsByQiyiPublishDate";
  option (knowledge.pub.service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;

  optional int64 start_time = 2;
  optional int64 end_time = 3;

  optional int32 from = 4[default = 0];
  optional int32 size = 5[default = 10];

  optional SiteType iqiyi_site = 6 [default = SITE_ZH];
  repeated Language iqiyi_language = 7;
}

message QueryResponse {
  option (knowledge.pub.service_message_options).method_name = "queryGraphCollectionsByQiyiPublishDate,queryCelebrityByUid,termsQuery,queryOperationTips,getVideosByIpAndPlatform,getUserVideos";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;

  optional int64 total = 3;

  // Query service查询结果.
  repeated knowledge.pub.query.QueryHit hit = 4;
}

message FillVideosWithFeedRequest{
  optional knowledge.pub.User user = 1;
  // Query service查询结果.
  repeated knowledge.pub.query.QueryHit hit = 2;
  optional SiteType iqiyi_site = 3 [default = SITE_ZH];
  repeated Language iqiyi_language = 4;
}

message QueryCelebrityByUidRequest {
  option (knowledge.pub.service_message_options).method_name = "queryCelebrityByUid";
  option (knowledge.pub.service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;

  optional int64 uid = 2;

  optional int32 from = 3[default = 0];
  optional int32 size = 4[default = 10];
}

message GetFilmTvLibFromQipuIdRequest {
  option (knowledge.pub.service_message_options).method_name = "getFilmTvLibFromQipuId";
  option (knowledge.pub.service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;

  // 站内视频的奇谱 ID
  optional int64 qipu_id = 2;
  // 是否读取站内视频本身的信息
  optional bool include_qipu_entity = 3[default = false];
  // 需读取的站内视频字段
  repeated knowledge.pub.ColumnGroup qipu_entity_columns = 4;
  // 需读取的影视大全字段
  repeated knowledge.pub.ColumnGroup film_tv_lib_columns = 5;
}

message GetFilmTvLibFromQipuIdResponse {
  option (knowledge.pub.service_message_options).method_name = "getFilmTvLibFromQipuId";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;
  optional knowledge.pub.Album album = 3;
  optional knowledge.pub.Episode episode = 4;
  optional knowledge.pub.FilmTvLibrary film_tv_library = 5;
}


message TermsQueryRequest {
  option (knowledge.pub.service_message_options).method_name = "termsQuery";
  option (knowledge.pub.service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;

  // 查询的参数，可为多个，每个参数格式为 field:value
  // 支持多值查询，格式为 field:[value1;value2;value3]
  repeated string term = 2;
  // 返回的字段，支持多个
  repeated string include = 3;
  // 不返回的字段，支持多个
  repeated string exclude = 4;
  // 待查询的表，支持多个
  repeated string table = 5;
  // 返回结果的格式
  optional knowledge.pub.query.QueryHitFormat format = 6 [default = SOURCE];
  // 返回结果的起始位置
  optional int32 from = 7 [default = 0];
  // 返回结果的个数
  optional int32 size = 8 [default = 10];
}

message QueryOperationTipsRequest {
  option (knowledge.pub.service_message_options).method_name = "queryOperationTips";
  option (knowledge.pub.service_message_options).type = REQUEST;

  /**
   * 访问这个接口的用户账号。使用方必须申请到账号才能使用这个接口。 账号分配请联系奇谱项目组:
   **/
  optional knowledge.pub.User user = 1;

  // 提示语所在的应用
  optional string application = 2;
  // 提示语所在的模块
  repeated string module = 3;
  // 提示语的语言
  optional knowledge.pub.Language language = 4;
  // 是否只返回特定语言的提示语，过滤其他语言
  optional bool filter_language = 5 [default = false];

  // 返回结果的起始位置
  optional int32 from = 6 [default = 0];
  // 返回结果的个数
  optional int32 size = 7 [default = 10];

  optional SiteType iqiyi_site = 8 [default = SITE_ZH];
  repeated Language iqiyi_language = 9;
}

message GetMultiRelatedVideosOfVideoRequest {
  option (knowledge.pub.service_message_options).method_name = "getMultiRelatedVideosOfVideo";
  option (knowledge.pub.service_message_options).type = REQUEST;

  /**
   * 访问这个接口的用户账号。使用方必须申请到账号才能使用这个接口。 账号分配请联系奇谱项目组:
   **/
  optional knowledge.pub.User user = 1;
  optional int64 entity_id = 2;
  repeated SelectStrategy select_strategys = 3;
  optional int32 from = 4 [default = 0];
  optional int32 size = 5 [default = 10];

  optional SiteType iqiyi_site = 6 [default = SITE_ZH];
  repeated Language iqiyi_language = 7;
}

message GetMultiRelatedVideosOfVideoResponse {
  option (knowledge.pub.service_message_options).method_name = "getMultiRelatedVideosOfVideo";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;
  repeated GetV2VResponse response = 3;
}

message GetV2VResponse{
  repeated knowledge.graph.pub.AlbumVideoData videos = 1;
  optional SelectStrategy strategy = 2;
  optional bool has_error = 3 [default = false];
}

enum SelectStrategy {
  SAME_DIRECTOR = 1;
  SAME_CHARACTER = 2;
  SAME_HOST = 3;
  SAME_CATEGORY = 4;
  SAME_SERIES = 5;
}

message GetRelatedInfoOfCelebrityRequest {
  option (knowledge.pub.service_message_options).method_name = "getRelatedInfoOfCelebrity";
  option (knowledge.pub.service_message_options).type = REQUEST;

  /**
   * 访问这个接口的用户账号。使用方必须申请到账号才能使用这个接口。 账号分配请联系奇谱项目组:
   **/
  optional knowledge.pub.User user = 1;
  optional int64 entity_id = 2;
  repeated string channel_list = 3;
  optional int32 video_size = 4 [default = 5];
  optional int32 people_size = 5 [default = 5];

  optional knowledge.graph.pub.RankingPolicy ranking_policy = 6 [default = PUBLISH_TIME];

  optional bool include_film_tv_lib = 7 [default = false];

  // only qiyi produced flag, if it is true, filter out the non-qiyi produced album
  optional bool only_qiyi_produced = 8 [default = false];

  repeated string include_role = 9;
  repeated string exclude_role = 10;

  // If true, will return film_tv_category for related entities
  optional bool include_category_info = 11 [default = false];

  // If true, will return film_tv_category for related entities
  optional bool include_tag_info = 12 [default = false];

  // If true, will keep film_tv_lib instead of album/episode if they have the same title
  optional bool film_tv_lib_first = 13 [default = false];

  // If true, will remove Albums from response
  optional bool exclude_album = 14 [default = false];

  // If true, will include qipu entity info in response
  optional bool include_entity = 15 [default = false];

  // Columns of entities that user want to include in response
  repeated knowledge.pub.ColumnGroup entity_columns = 16;

  // If true, will return all child videos of albums
  optional bool include_child_data = 17 [default = false];

  // for play-control filtering
  optional knowledge.graph.pub.CallerInfo caller_info = 18;

  // If true, will only return videos with role info
  optional bool filter_no_roles = 19;

  optional int32 from = 20 [default = 0];

  optional SiteType iqiyi_site = 21 [default = SITE_ZH];
  repeated Language iqiyi_language = 22;
}

message GetRelatedInfoOfCelebrityResponse {
  option (knowledge.pub.service_message_options).method_name = "getRelatedInfoOfCelebrity";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;
  // 明星的相关明星
  optional knowledge.graph.pub.CelebrityDataList related_celebrity = 3;
  // 被查询的明星本人的信息
  optional knowledge.graph.pub.CelebrityDataList self_info = 4;
  repeated RelatedVideo related_videos = 5;
}
// 明星相关视频信息
message RelatedVideo {
  optional string channel = 1 ;
  repeated knowledge.graph.pub.AlbumVideoData related_videos = 2;
  optional int64 channel_total =3;
}

message FilterVideosByChannelIdRequest{
  repeated string channel_list = 1;
  repeated knowledge.graph.pub.AlbumVideoData related_videos = 2;
  optional int32 size = 3 [default = 5];
}

message FilterVideosByChannelIdResponse{
  repeated RelatedVideo related_videos = 1;
}

message GetVideosAndAlbumsRequest {
  option (knowledge.pub.service_message_options).method_name = "getUploadedVideosAndAlbums";
  option (knowledge.pub.service_message_options).type = REQUEST;

  optional knowledge.pub.User user = 1;
  optional int64 uploader_id = 2;
  optional int32 newest_videos_size = 3 [default = 8];
  optional int32 hottest_videos_size = 4 [default = 8];
  optional int32 albums_playlist_size = 5 [default = 8];

  optional SiteType iqiyi_site = 6 [default = SITE_ZH];
  repeated Language iqiyi_language = 7;
}

message GetVideosAndAlbumsResponse {
  option (knowledge.pub.service_message_options).method_name = "getUploadedVideosAndAlbums";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;
  optional knowledge.pub.query.QueryResponse newest_video = 3;
  optional knowledge.pub.query.QueryResponse hottest_video = 4;
  optional knowledge.pub.query.QueryResponse album_playlist = 5;

}



message PlayRecordVideo {
  optional knowledge.pub.Album album = 1;
  optional knowledge.pub.Episode episode = 2;
  optional knowledge.pub.UgcEpisode ugc_episode = 3;
  optional knowledge.graph.pub.AlbumVideoData episode_summary = 4;
  optional knowledge.graph.pub.AlbumVideoData album_summary =5;
  optional knowledge.graph.pub.AlbumVideoData nextVideo = 6;
  optional knowledge.graph.pub.AlbumVideoData newestVideo = 7;
}

message GetPlayRecordVideoRequest {
  option (knowledge.pub.service_message_options).method_name = "getPlayRecordVideo";
  option (knowledge.pub.service_message_options).type = REQUEST;
  /**
   * 接口访问权限帐号.
   */
  optional knowledge.pub.User user = 1;
  repeated int64 video_id = 2;

  optional SiteType iqiyi_site = 3 [default = SITE_ZH];
  repeated Language iqiyi_language = 4;
}

message GetPlayRecordVideoResponse {
  option (knowledge.pub.service_message_options).method_name = "getPlayRecordVideo";
  option (knowledge.pub.service_message_options).type = RESPONSE;

  optional knowledge.pub.RpcStatus rpc_status = 1;
  optional string error_message = 2;

  repeated PlayRecordVideo video = 3;
}
message GetVideosByIpAndPlatformRequest {
  optional knowledge.pub.User user = 1;
  required int64 uid = 2;
  required knowledge.graph.pub.CallerInfo caller_info = 3;
  optional int32 from = 4 [default = 0];
  optional int32 size = 5 [default = 30];
  optional knowledge.pub.Order order = 6;
  optional SiteType iqiyi_site = 7 [default = SITE_ZH];
  repeated Language iqiyi_language = 8;

  option (knowledge.pub.service_message_options).method_name = "getVideosByIpAndPlatform";
  option (knowledge.pub.service_message_options).type = REQUEST;
}

message MergeUploadedVideosAndLiveVideosRequest {
  repeated knowledge.pub.query.QueryHit uploaded_videos_hit = 1;
  repeated knowledge.pub.query.QueryHit live_uploaded_videos_hit = 2;
  optional knowledge.graph.pub.CallerInfo caller_info = 3;
  optional knowledge.pub.Order order = 4;
  option (knowledge.pub.service_message_options).method_name = "mergeUploadedVideoAndLiveVideo";
  option (knowledge.pub.service_message_options).type = REQUEST;
}

message MergeUploadedVideosAndLiveVideosResponse {
  repeated knowledge.pub.query.QueryHit hit = 1;
  option (knowledge.pub.service_message_options).method_name = "mergeUploadedVideoAndLiveVideo";
  option (knowledge.pub.service_message_options).type = RESPONSE;
}

message GetVideosByTitleOrPageUrlRequest {
  optional knowledge.pub.User user = 1;
  optional string title = 2;
  optional string pageUrl = 3;
  optional int32 from = 4 [default = 0];
  optional int32 size = 5 [default = 10];
  optional SiteType iqiyi_site = 6 [default = SITE_ZH];
  repeated Language iqiyi_language = 7;
  optional int32 max_duration = 8;
  optional int32 min_duration = 9;
  repeated string source_provider = 10;
  repeated int64 uploader_id = 11;
  option (knowledge.pub.service_message_options).method_name = "getVideosByTitleOrPageUrl";
  option (knowledge.pub.service_message_options).type = REQUEST;
}

message VideoInfoForAd {
  optional int64 tvId = 1;
  optional string name = 2;
  optional int64 feedId = 3;
  optional int32 duration = 4;
  optional string pageUrl = 5;
  optional int64 albumId = 6;
}

message GetVideosByTitleOrPageUrlResponse {
  repeated VideoInfoForAd hits = 1;
  optional string error_message = 2;
  optional bool has_error = 3;
  optional int32 total = 4;
  option (knowledge.pub.service_message_options).method_name = "getVideosByTitleOrPageUrl";
  option (knowledge.pub.service_message_options).type = RESPONSE;
}

message GetUserVideosRequest {
  optional knowledge.pub.User user = 1;
  required int64 uid = 2;
  optional int32 from = 3 [default = 0];
  optional int32 size = 4 [default = 30];
  optional knowledge.pub.Order order = 6;
  optional SiteType iqiyi_site = 7 [default = SITE_ZH];
  repeated Language iqiyi_language = 8;

  option (knowledge.pub.service_message_options).method_name = "getUserVideos";
  option (knowledge.pub.service_message_options).type = REQUEST;
}
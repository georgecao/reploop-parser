// Author: Qi Qiao (qiaoqi@qiyi.com)

package knowledge.graph.policy;

// Some configurable parameters related to video quality judgment.
message BoostScoreConf {
  // Dynamically capture the popularity smoothly as the play counts ranges.
  required int32 scale_step = 1 [default = 100000000];

  // It depicts the extent freshness decay with time.
  required double freshness_decay_ratio = 2 [default = -0.01];

  // The minimum freshness score , which is a baseline for any video.
  required double freshness_threshold = 3 [default = 0.4];

  // The ratio a video's authority may take effect on its quality.
  required double authority_weight = 4 [default = 0.3];

  // The ration a video's freshness may take effect on its quality.
  required double freshness_weight = 5 [default = 0.3];

  // The ration a video's popularity may take effect on its quality.
  required double popularity_weight = 6 [default = 0.2];

  // The ration a video's duration may take effect on its quality.
  required double duration_weight = 7 [default = 0.2];

  // The pre-defined default authority of a video.
  required double default_authority = 8 [default = 0.6];

  // The pre-defined default freshness of a video.
  required double default_freshness = 9 [default = 0.6];

  required double default_durability = 10 [default = 0.5];

  // Pre-defined maximum durability, measured in seconds,meaning most popular when value is above it.
  required int32 max_durability = 11 [default = 10800];

  // Pre-defined minimum popularity, whose value below it will be ignored.
  required int32 min_durability = 12 [default = 10];
}

// Some configurable parameters related to mutual tightness between people in a same video.
message TightnessScoreConf {
  // Depicts the decay of one step distance between two people.
  required double step_decay = 1 [default = 0.05];

  // Indicates the minimum tightness of two people acting the same role.
  required double inner_group_threshold = 2 [default = 0.5];

  // Indicates the minimum tightness of two people acting different roles but must
  // satisfy some rules, firstly, the two people's index in each role group must
  // be low, secondly, the difference between two people's index must be low.
  required double cross_group_threshold = 3 [default = 0.3];

  // Used to depict the decay extent between two different group.
  required double cross_group_decay = 4 [default = 0.7];

  // Indicates the maximum distance of two people's index in different role group,
  // only below which tightness calculation between them will be taken into account.
  required int32 max_distance = 5 [default = 3];

  // Indicates the maximum index of people' index in role group, only below which
  // tightness calculation will be taken into account.
  required int32 max_index = 6 [default = 3];
}

// Some configurable parameters related to measure the importance of a people in a video.
message WeightScoreConf {
  // Define the weight of different role.
  message RoleWeight {
  required string name = 1;
  required double weight = 2;
  }

  repeated RoleWeight role_weight = 1;

  // The default role weight except for explicitly specified.
  required double default_weight = 2 [default = 0.7];

  // Divide people in a same role to different level, with this indicating the
  // person number each level contains.
  required int32 person_per_level = 3 [default = 3];

  // Indicates the decay of one level.
  required double decay_per_level = 4 [default = 0.2];

  // The minimum weight of a person to a video.
  required double threshold = 5 [default = 0.4];
}

// Proto definitions for configure StrategicTightnessMeasurer.
message StrategicTightnessMeasurerConf {
  required BoostScoreConf boost_score_conf = 1;

  required TightnessScoreConf tightness_score_conf = 2;

  required WeightScoreConf weight_score_conf = 3;
}
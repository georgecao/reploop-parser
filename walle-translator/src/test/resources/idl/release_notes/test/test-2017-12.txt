2017/12/01 (2.0.171201-SNAPSHOT)
23直播增加tab控制前端展示内容的运营字段
1. /knowledge/pub/properties.proto
/**
 * @brief 播放页tab内容控制
 **/
message LiveEpisodeTabControl {
  //tab类型
  optional LiveEpisodeTabType tab_type = 1 [default = UNKNOWN_LIVE_EPISODE_TAB_TYPE];
  //显示名称
  optional string tab_name = 2;
  //是否显示tab
  optional bool is_display_tab = 3 [default = false];
  //活动地址
  optional string activity_url = 4;
}
message LiveEpisodeBase {
  //播放页tab内容控制
  repeated LiveEpisodeTabControl tab_control = 41;
}
2. /knowledge/pub/common.proto
/**
 * @brief tab类型
 **/
enum LiveEpisodeTabType {
  //未知类型
  UNKNOWN_LIVE_EPISODE_TAB_TYPE = -1;
  //聊天室
  LIVE_EPISODE_TAB_TYPE_CHAT_ROOM = 0;
  //看更多
  LIVE_EPISODE_TAB_TYPE_OTHER_LIVE_EPISODE = 1;
  //排行榜
  LIVE_EPISODE_TAB_TYPE_TOP_LIST = 2;
  //活动
  LIVE_EPISODE_TAB_TYPE_ACTIVITY = 3;
}
2017/12/01 (2.0.171201-SNAPSHOT)
新增轻小说书卷章实体
1. /knowledge/pub/common.proto
enum EntityIdType {
  //轻小说
  LIGHT_NOVEL = 1870;
  //轻小说卷
  LIGHT_NOVEL_VOLUME = 1970;
  //轻小说章
  LIGHT_NOVEL_CHAPTER = 2070;
}
enum Table {
  //轻小说
  LIGHT_NOVEL_TABLE = 69;
  //轻小说卷
  LIGHT_NOVEL_VOLUME_TABLE = 70;
  //轻小说章
  LIGHT_NOVEL_CHAPTER_TABLE = 71;
}
/**
 * @brief 创作者类型
 **/
enum CreatorType {
  //未知类型
  UNKNOWN_CREATOR_TYPE = -1;
  //作者
  CREATOR_TYPE_AUTHOR = 0;
  //画者
  CREATOR_TYPE_PAINTER = 1;
  //译者
  CREATOR_TYPE_TRANSLATOR = 2;
}
/**
 * @brief 章节类型
 **/
enum ChapterType {
  //未知类型
  UNKNOWN_CHAPTER_TYPE = -1;
  //普通章
  CHAPTER_TYPE_COMMON = 0;
  //感言章
  CHAPTER_TYPE_REFLECTION = 1;
}
/**
 * @brief 创作者类型
 **/
enum CreatorType {
  //未知类型
  UNKNOWN_CREATOR_TYPE = -1;
  //作者
  CREATOR_TYPE_AUTHOR = 0;
  //画者
  CREATOR_TYPE_PAINTER = 1;
  //译者
  CREATOR_TYPE_TRANSLATOR = 2;
}
/**
 * @brief 上线状态
 **/
enum AvailableStatus {
  //未知类型
  UNKNOWN_AVAILABLE_STATUS = -1;
}
enum RegionType {
  //中国_大陆
  CHINA_MAINLAND = 4;
  //中国台湾
  CHINA_TAIWAN = 5;
  //日本
  JAPAN = 6;
  //韩国
  KOREA = 7;
}
/**
 * @brief 上线状态
 **/
enum AvailableStatus {
  //未知类型
  UNKNOWN_AVAILABLE_STATUS = -1;
}
2. /knowledge/fusion/query/properties.proto
message QipuEntity {
  //轻小说
  optional LightNovel light_novel = 74;
  //轻小说卷
  optional LightNovelVolume light_novel_volume = 75;
  //轻小说章
  optional LightNovelChapter light_novel_chapter = 76;
}
3. /knowledge/pub/read_service.proto
message GetEntityResponse {
  // Response for request of entity: LightNovel
  repeated LightNovel light_novel = 74;
  // Response for request of entity: LightNovelVolume
  repeated LightNovelVolume light_novel_volume = 75;
  // Response for request of entity: LightNovelChapter
  repeated LightNovelChapter light_novel_chapter = 76;
}
4. /knowledge/pub/write_rpc_service.thrift

  /**
   * The write interfaces of setting for LightNovel.
   * Set all field of LightNovel,
   * or throws an exception if this operation is not valid.
   */
  binary setLightNovel(1:binary set_light_novel_request)
      throws (1:InvalidWriteOperation e);

  /**
   * The write interfaces of setting for LightNovelVolume.
   * Set all field of LightNovelVolume,
   * or throws an exception if this operation is not valid.
   */
  binary setLightNovelVolume(1:binary set_light_novel_volume_request)
      throws (1:InvalidWriteOperation e);

  /**
   * The write interfaces of setting for LightNovelVolume.
   * Set all field of LightNovelVolume,
   * or throws an exception if this operation is not valid.
   */
  binary setLightNovelVolume(1:binary set_light_novel_volume_request)
      throws (1:InvalidWriteOperation e);

  /**
   * The write interfaces of setting for LightNovelChapter.
   * Set all field of LightNovelChapter,
   * or throws an exception if this operation is not valid.
   */
  binary setLightNovelChapter(1:binary set_light_novel_chapter_request)
      throws (1:InvalidWriteOperation e);
5. /knowledge/pub/write_service.proto

// Proto for setLightNovel method defined in write_rpc_service.thrift
message SetLightNovelRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_TABLE;
  option (request_options).set_interface = "setLightNovel";

  required User user = 1;

  optional LightNovel merge_light_novel = 2;
  optional LightNovel delete_light_novel = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLightNovelVolume method defined in write_rpc_service.thrift
message SetLightNovelVolumeRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_VOLUME_TABLE;
  option (request_options).set_interface = "setLightNovelVolume";

  required User user = 1;

  optional LightNovelVolume merge_light_novel_volume = 2;
  optional LightNovelVolume delete_light_novel_volume = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLightNovelVolume method defined in write_rpc_service.thrift
message SetLightNovelVolumeRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_VOLUME_TABLE;
  option (request_options).set_interface = "setLightNovelVolume";

  required User user = 1;

  optional LightNovelVolume merge_light_novel_volume = 2;
  optional LightNovelVolume delete_light_novel_volume = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLightNovelChapter method defined in write_rpc_service.thrift
message SetLightNovelChapterRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_CHAPTER_TABLE;
  option (request_options).set_interface = "setLightNovelChapter";

  required User user = 1;

  optional LightNovelChapter merge_light_novel_chapter = 2;
  optional LightNovelChapter delete_light_novel_chapter = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}
6. /entity/schema-1870-light-novel.fproto
/**
 * @brief 轻小说
 * @details 轻小说实体。
 **/
message LightNovel {
  //option
  option (entity_option).table = LIGHT_NOVEL_TABLE;
  option (entity_option).entity_name = "light_novel";
  option (table_option).hbase_table_name = "qipu_light_novel_table";
  option (entity_option).entity_id_type = LIGHT_NOVEL;
  //实体id
  required int64 id = 1 [(column_option).is_auto_set = true];
  //是否删除。奇谱不真正删除数据。 使用这个标识来标记该数据已经删除。
  optional bool deleted = 2 [default = false, (column_option).has_value = false, (field_option).column_group = DELETED, (column_option).column_name = "del"];
  //最后更新时间，任何字段更新都会导致这个最后更新时间被修改。这个字段由奇谱自动维护。
  optional int64 last_update_time = 3 [(field_option).column_group = LAST_UPDATE_TIME, (column_option).column_name = "lut", (column_option).is_auto_set = true, (track_option).notracker=true];
  //基本信息
  optional LightNovelMetadata metadata = 4 [(field_option).column_group = METADATA, (column_option).column_name = "c_4_n"];
  //运营信息
  optional BookBase base = 5 [(field_option).column_group = BASE, (column_option).column_name = "c_5_n"];
  //卷情况
  repeated MetaSummary volume_summary = 6 [(field_option).column_group = CHILD_VOLUME, (column_option).column_name = "c_6_n_", (column_option).column_suffix = "${entity_id}"];
  //章情况
  repeated MetaSummary chapter_summary = 7 [(field_option).column_group = CHILD_CHAPTER, (column_option).column_name = "c_7_n_", (column_option).column_suffix = "${entity_id}"];
  //创作者信息
  repeated CreatorSummary creator_summary = 8 [(field_option).column_group = CREATOR_SUMMARY, (column_option).column_name = "c_8_n_", (column_option).column_suffix = "${entity_id}"];
  //CP信息
  optional MetaSummary cp_summary = 9 [(field_option).column_group = CP_SUMMARY, (column_option).column_name = "c_9_n"];
  //图片相关
  optional LocaleImage local_image = 10 [(field_option).column_group = LOCAL_IMAGE, (column_option).column_name = "c_10_n"];
  //cp相关
  optional CpInfo cp_info = 11 [(field_option).column_group = CP_INFO, (column_option).column_name = "c_11_n"];
  //二级分类
  repeated CategorySummary category = 12 [(field_option).column_group = CATEGORY_SUMMARY, (column_option).column_name = "c_12_n_", (column_option).column_suffix = "${category_id}"];
  //标签
  repeated TagSummary tag_summary = 13 [(field_option).column_group = TAG_SUMMARY, (column_option).column_name = "c_13_n_", (column_option).column_suffix = "${source_type}"];
  //更新信息
  optional LightNovelUpdateInfo update_info = 14 [(field_option).column_group = UPDATE_INFO, (column_option).column_name = "c_14_n"];
  //完结状况
  optional BookAvailableStatus serialize_status = 15 [(field_option).column_group = AVAILABLE_STATUS, (column_option).column_name = "c_15_n"];
  //播控
  repeated Publication publication = 16 [(field_option).column_group = BOOK_PUBLICATION, (column_option).column_name = "c_17_n_", (column_option).column_suffix = "${platform}"];
  //最新章发布时间（时间戳，单位毫秒）
  optional int64 chapter_last_online_time = 17 [(field_option).column_group = CHAPTER_LAST_ONLINE_TIME, (column_option).column_name = "c_17_n"];
  //轻小说人气值（前台写入）
  optional int64 book_polularity = 18 [(field_option).column_group = BOOK_POLULARITY, (column_option).column_name = "c_18_n"];
  //总卷数
  optional int64 volume_count = 19 [(field_option).column_group = VOLUME_COUNT, (column_option).column_name = "c_19_n"];
  //总章数
  optional int64 chapter_count = 20 [(field_option).column_group = CHAPTER_COUNT, (column_option).column_name = "c_20_n"];
}
/**
 * @brief 轻小说卷
 * @details 轻小说的卷
 **/
message LightNovelVolume {
  //option
  option (entity_option).table = LIGHT_NOVEL_VOLUME_TABLE;
  option (entity_option).entity_name = "light_novel_volume";
  option (table_option).hbase_table_name = "qipu_light_novel_volume_table";
  option (entity_option).entity_id_type = LIGHT_NOVEL_VOLUME;
  //实体id
  required int64 id = 1 [(column_option).is_auto_set = true];
  //是否删除。奇谱不真正删除数据。 使用这个标识来标记该数据已经删除。
  optional bool deleted = 2 [default = false, (column_option).has_value = false, (field_option).column_group = DELETED, (column_option).column_name = "del"];
  //最后更新时间，任何字段更新都会导致这个最后更新时间被修改。这个字段由奇谱自动维护。
  optional int64 last_update_time = 3 [(field_option).column_group = LAST_UPDATE_TIME, (column_option).column_name = "lut", (column_option).is_auto_set = true, (track_option).notracker=true];
  //卷基本信息
  optional LightNovelVolumeMetadata metadata = 4 [(field_option).column_group = METADATA, (column_option).column_name = "c_4_n"];
  //所属书
  optional FatherInfo father_book = 5 [(field_option).column_group = FATHER_BOOK, (column_option).column_name = "c_5_n"];
  //章节
  repeated MetaSummary chapter_summary = 6 [(field_option).column_group = CHAPTER_SUMMARY, (column_option).column_name = "c_6_n_", (column_option).column_suffix = "${entity_id}"];
  //该卷章数
  optional int64 chapter_count = 7 [(field_option).column_group = CHAPTER_COUNT, (column_option).column_name = "c_7_n"];
  //最新章发布时间（时间戳，单位毫秒）
  optional int64 chapter_last_online_time = 8 [(field_option).column_group = CHAPTER_LAST_ONLINE_TIME, (column_option).column_name = "c_8_n"];
  //发布控制
  optional Publication publication = 9 [(field_option).column_group = BOOK_PUBLICATION, (column_option).column_name = "c_9_n"];
}
/**
 * @brief 轻小说章
 * @details 轻小说的章
 **/
message LightNovelChapter {
  //option
  option (entity_option).table = LIGHT_NOVEL_CHAPTER_TABLE;
  option (entity_option).entity_name = "light_novel_chapter";
  option (table_option).hbase_table_name = "qipu_light_novel_chapter_table";
  option (entity_option).entity_id_type = LIGHT_NOVEL_CHAPTER;
  //实体id
  required int64 id = 1 [(column_option).is_auto_set = true];
  //是否删除。奇谱不真正删除数据。 使用这个标识来标记该数据已经删除。
  optional bool deleted = 2 [default = false, (column_option).has_value = false, (field_option).column_group = DELETED, (column_option).column_name = "del"];
  //最后更新时间，任何字段更新都会导致这个最后更新时间被修改。这个字段由奇谱自动维护。
  optional int64 last_update_time = 3 [(field_option).column_group = LAST_UPDATE_TIME, (column_option).column_name = "lut", (column_option).is_auto_set = true, (track_option).notracker=true];
  //基本信息
  optional LightNovelChapterMetadata metadata = 4 [(field_option).column_group = METADATA, (column_option).column_name = "c_4_n"];
  //所属卷
  optional FatherInfo father_volume = 5 [(field_option).column_group = FATHER_VOLUME, (column_option).column_name = "c_5_n"];
  //所属书
  optional FatherInfo father_book = 6 [(field_option).column_group = FATHER_BOOK, (column_option).column_name = "c_6_n"];
  //章节类型
  optional ChapterType chapter_type = 7 [default = UNKNOWN_CHAPTER_TYPE, (field_option).column_group = CHAPTER_TYPE, (column_option).column_name = "c_7_n"];
  //内容相关
  repeated BookFormat format = 8 [(field_option).column_group = FORMAT, (column_option).column_name = "c_8_n_", (column_option).column_suffix = "${file_type}"];
  //发布控制
  optional Publication publication = 9 [(field_option).column_group = BOOK_PUBLICATION, (column_option).column_name = "c_9_n"];
  //章字数
  optional int64 word_count = 10 [(field_option).column_group = WORD_COUNT, (column_option).column_name = "c_10_n"];
  //章图片数
  optional int64 image_count = 11 [(field_option).column_group = IMAGE_COUNT, (column_option).column_name = "c_11_n"];
}
7. /knowledge/pub/properties.proto
/**
 * @brief 轻小说更新信息
 **/
message LightNovelUpdateInfo {
  //更新频率
  optional UpdateFrequency update_frequency = 1 [default = UNKNOWN_UPDATE_FREQUENCY];
  //周更新时间
  repeated UpdateDay weekly_update_time = 2;
}
/**
 * @brief 卷基本信息
 **/
message LightNovelVolumeMetadata {
  //卷id
  optional int64 entity_id = 1;
  //卷标题
  optional string title = 2;
  //卷类型
  optional VolumeType type = 3;
}
/**
 * @brief 作者相关情况(CP商提供)
 **/
message CpCreatorInfo {
  //作者名称
  optional string author = 1;
  //画师名称
  optional string painter = 2;
  //译者名称
  optional string translator = 3;
}
/**
 * @brief 作者信息
 **/
message CreatorSummary {
  //作者id
  optional int64 entity_id = 1;
  //创作者名称
  optional string creator_name = 2;
  //创作者类型
  optional CreatorType creator_type = 3 [default = UNKNOWN_CREATOR_TYPE];
}
/**
 * @brief cp相关
 **/
message CpInfo {
  //本书人气值（CP商提供的初始值）
  optional int64 popularity = 1;
  //创作者信息
  optional CpCreatorInfo creator_info = 2;
}
/**
 * @brief 基本信息
 **/
message LightNovelMetadata {
  //实体id
  optional int64 entity_id = 1;
  //书内容格式
  optional BookMediaType book_media_type = 2 [default = UNKNOWN_BOOKE_MEDIA_TYPE];
  //标题相关（title）
  optional Title title = 3;
  //简介
  optional string description = 4;
  //一句话简介
  optional string prompt_description = 5;
  //来源类型
  optional BookSourceType source_type = 6;
  //阅读顺序（纯图片的轻小说写入该字段）
  optional BookReadOrder read_order = 7 [default = UNKNOWN_BOOK_READ_ORDER];
  //创建时间(轻小说在奇谱的创建时间，乐高维护，单位毫秒)
  optional int64 create_time = 8;
}
/**
 * @brief 作者相关情况(CP商提供)
 **/
message CpCreatorInfo {
  //作者名称
  optional string author = 1;
  //画师名称
  optional string painter = 2;
  //译者名称
  optional string translator = 3;
}
/**
 * @brief 作者信息
 **/
message CreatorSummary {
  //作者id
  optional int64 entity_id = 1;
  //创作者名称
  optional string creator_name = 2;
  //创作者类型
  optional CreatorType creator_type = 3 [default = UNKNOWN_CREATOR_TYPE];
}
/**
 * @brief cp相关
 **/
message CpInfo {
  //本书人气值（CP商提供的初始值）
  optional int64 popularity = 1;
  //创作者信息
  optional CpCreatorInfo creator_info = 2;
}
/**
 * @brief 卷基本信息
 **/
message LightNovelVolumeMetadata {
  //卷id
  optional int64 entity_id = 1;
  //卷标题
  optional string title = 2;
  //卷类型
  optional VolumeType type = 3;
}
/**
 * @brief 基本信息
 **/
message LightNovelChapterMetadata {
  //章ID
  optional int64 entity_id = 1;
  //章名称
  optional string chapter_name = 2;
}
/**
 * @brief 轻小说更新信息
 **/
message LightNovelUpdateInfo {
  //更新频率
  optional UpdateFrequency update_frequency = 1 [default = UNKNOWN_UPDATE_FREQUENCY];
  //周更新时间
  repeated UpdateDay weekly_update_time = 2;
}
/**
 * @brief 书地区控制
 **/
message BookRegionControl {
  //地区
  repeated Location location = 1;
  //上线状态
  optional AvailableStatus available_status = 2 [default = UNKNOWN_AVAILABLE_STATUS];
  //屏蔽搜索（True: not enter into search; False: enter into search.）
  optional bool reject_search = 3 [default = FALSE];
  //屏蔽推荐（True: not enter into recommend; vice versa.）
  optional bool reject_recommend = 4 [default = FALSE];
  //屏蔽进入TOP榜（True: not enter into top list; vice versa.）
  optional bool reject_top = 5 [default = FALSE];
  //屏蔽免费书架字段（True: not enter into free bookshekf; vice versa.）
  optional bool reject_free_bookshelf = 6 [default = FALSE];
  //是否可下载（True:allowed to download; vice versa.）
  optional bool is_download_allowed = 7 [default = FALSE];
}
/**
 * @brief 基本信息
 **/
message LightNovelChapterMetadata {
  //章ID
  optional int64 entity_id = 1;
  //章名称
  optional string chapter_name = 2;
}
message Publication {
  //地区控制
  repeated BookRegionControl region_control = 13;
}
message BookBase {
  //书来源地区
  optional RegionType book_source_region = 9;
}
/**
 * @brief 书地区控制
 **/
message BookRegionControl {
  //地区
  repeated Location location = 1;
  //上线状态
  optional AvailableStatus available_status = 2 [default = UNKNOWN_AVAILABLE_STATUS];
  //屏蔽搜索（True: not enter into search; False: enter into search.）
  optional bool reject_search = 3 [default = FALSE];
  //屏蔽推荐（True: not enter into recommend; vice versa.）
  optional bool reject_recommend = 4 [default = FALSE];
  //屏蔽进入TOP榜（True: not enter into top list; vice versa.）
  optional bool reject_top = 5 [default = FALSE];
  //屏蔽免费书架字段（True: not enter into free bookshekf; vice versa.）
  optional bool reject_free_bookshelf = 6 [default = FALSE];
  //是否可下载（True:allowed to download; vice versa.）
  optional bool is_download_allowed = 7 [default = FALSE];
}
8. /entity/schema-1970-light-novel-volume.fproto
/**
 * @brief 轻小说卷
 * @details 轻小说的卷
 **/
message LightNovelVolume {
  //option
  option (entity_option).table = LIGHT_NOVEL_VOLUME_TABLE;
  option (entity_option).entity_name = "light_novel_volume";
  option (table_option).hbase_table_name = "qipu_light_novel_volume_table";
  option (entity_option).entity_id_type = LIGHT_NOVEL_VOLUME;
  //实体id
  required int64 id = 1 [(column_option).is_auto_set = true];
  //是否删除。奇谱不真正删除数据。 使用这个标识来标记该数据已经删除。
  optional bool deleted = 2 [default = false, (column_option).has_value = false, (field_option).column_group = DELETED, (column_option).column_name = "del"];
  //最后更新时间，任何字段更新都会导致这个最后更新时间被修改。这个字段由奇谱自动维护。
  optional int64 last_update_time = 3 [(field_option).column_group = LAST_UPDATE_TIME, (column_option).column_name = "lut", (column_option).is_auto_set = true, (track_option).notracker=true];
  //卷基本信息
  optional LightNovelVolumeMetadata metadata = 4 [(field_option).column_group = METADATA, (column_option).column_name = "c_4_n"];
  //所属书
  optional FatherInfo father_book = 5 [(field_option).column_group = FATHER_BOOK, (column_option).column_name = "c_5_n"];
  //章节
  repeated MetaSummary chapter_summary = 6 [(field_option).column_group = CHAPTER_SUMMARY, (column_option).column_name = "c_6_n_", (column_option).column_suffix = "${entity_id}"];
  //该卷章数
  optional int64 chapter_count = 7 [(field_option).column_group = CHAPTER_COUNT, (column_option).column_name = "c_7_n"];
  //最新章发布时间（时间戳，单位毫秒）
  optional int64 chapter_last_online_time = 8 [(field_option).column_group = CHAPTER_LAST_ONLINE_TIME, (column_option).column_name = "c_8_n"];
  //发布控制
  optional Publication publication = 9 [(field_option).column_group = BOOK_PUBLICATION, (column_option).column_name = "c_9_n"];
}
9. /entity/schema-2070-light-novel-chapter.fproto
/**
 * @brief 轻小说章
 * @details 轻小说的章
 **/
message LightNovelChapter {
  //option
  option (entity_option).table = LIGHT_NOVEL_CHAPTER_TABLE;
  option (entity_option).entity_name = "light_novel_chapter";
  option (table_option).hbase_table_name = "qipu_light_novel_chapter_table";
  option (entity_option).entity_id_type = LIGHT_NOVEL_CHAPTER;
  //实体id
  required int64 id = 1 [(column_option).is_auto_set = true];
  //是否删除。奇谱不真正删除数据。 使用这个标识来标记该数据已经删除。
  optional bool deleted = 2 [default = false, (column_option).has_value = false, (field_option).column_group = DELETED, (column_option).column_name = "del"];
  //最后更新时间，任何字段更新都会导致这个最后更新时间被修改。这个字段由奇谱自动维护。
  optional int64 last_update_time = 3 [(field_option).column_group = LAST_UPDATE_TIME, (column_option).column_name = "lut", (column_option).is_auto_set = true, (track_option).notracker=true];
  //基本信息
  optional LightNovelChapterMetadata metadata = 4 [(field_option).column_group = METADATA, (column_option).column_name = "c_4_n"];
  //所属卷
  optional FatherInfo father_volume = 5 [(field_option).column_group = FATHER_VOLUME, (column_option).column_name = "c_5_n"];
  //所属书
  optional FatherInfo father_book = 6 [(field_option).column_group = FATHER_BOOK, (column_option).column_name = "c_6_n"];
  //章节类型
  optional ChapterType chapter_type = 7 [default = UNKNOWN_CHAPTER_TYPE, (field_option).column_group = CHAPTER_TYPE, (column_option).column_name = "c_7_n"];
  //内容相关
  repeated BookFormat format = 8 [(field_option).column_group = FORMAT, (column_option).column_name = "c_8_n_", (column_option).column_suffix = "${file_type}"];
  //发布控制
  optional Publication publication = 9 [(field_option).column_group = BOOK_PUBLICATION, (column_option).column_name = "c_9_n"];
  //章字数
  optional int64 word_count = 10 [(field_option).column_group = WORD_COUNT, (column_option).column_name = "c_10_n"];
  //章图片数
  optional int64 image_count = 11 [(field_option).column_group = IMAGE_COUNT, (column_option).column_name = "c_11_n"];
}
10. /knowledge/pub/metadatas.proto
message Title {
  //外文名
  optional string foreign_title = 9;
}

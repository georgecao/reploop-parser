2018/01/30 (2.0.180130)
39实体下播控增加两个平台
1. /knowledge/pub/common.proto
enum PlayPlatform {
  //安卓手机（漫画、文学APP）
  ANDROID_PHONE_BOOK_APP = 23;
  //IOS手机（漫画APP）
  IOS_PHONE_BOOK_APP = 24;
}
2018/01/30 (2.0.180130)
47圈子新增奇秀直播业务
1. /knowledge/pub/common.proto
enum CircleBusinessType {
  //奇秀业务
  CIRCLE_BUSINESS_TYPE_QIXIU = 22;
}
2018/01/29 (2.0.180129)
漫画新增charge_control控制字段
1. /knowledge/pub/properties.proto
/**
 * @brief 漫画、文学、轻小说等的付费控制信息
 **/
message PublicatonChargeControl {
  //平台
  optional PlayPlatform platform = 1 [default = UNKNOWN_PLAYPLATFORM];
  //付费状态
  optional Boss.ChargeStatus status = 2 [default = UNKNOWN_CHARGE_STATUS];
  //付费方式
  optional Boss.BookChargeInfo.BookChargeMethod charge_method = 3 [default = BY_CHAPTER];
  //是否会员可见
  optional bool is_member_only = 4 [default = false];
}
2. /entity/schema-0070-comic-book.fproto
message ComicBook {
  //付费控制信息（漫画/文学/轻小说）
  repeated PublicatonChargeControl charge_control = 47 [(field_option).column_group = CHARGE_CONTROL, (column_option).column_name = "c_47_n_", (column_option).column_suffix = "${platform}"];
}
3. /entity/schema-0170-comic-book-chapter.fproto
message ComicBookChapter {
  //付费控制字段
  repeated PublicatonChargeControl charge_control = 44 [(field_option).column_group = CHARGE_CONTROL, (column_option).column_name = "c_44_n_", (column_option).column_suffix = "${platform}"];
}
4. /knowledge/pub/common.proto
enum ColumnGroup {
  CHARGE_CONTROL = 672;
}
2018/01/29 (2.0.180129)
48feed新增表白feed类型
1. /knowledge/pub/common.proto
/**
 * @brief 表白Feed拓展子类型
 **/
enum FeedConfessionExtendedType {
  //未知类型
  UNKNOWN_CONFESSION_EXTENDED_TYPE = -1;
  //表白卡
  CONFESSION_EXTENDED_TYPE_CARD = 0;
  //表白信
  CONFESSION_EXTENDED_TYPE_LETTER = 1;
}
enum FeedContentType {
  //表白feed
  FEED_CONFESSION = 107;
}
2. /knowledge/pub/metadatas.proto
message FeedContentExtendedType {
  //表白feed扩展类型
  optional FeedConfessionExtendedType confession_extended_type = 7 [default = UNKNOWN_CONFESSION_EXTENDED_TYPE];
}
2018/01/29 (2.0.180129)
播控增加首次发布时间字段
1. /knowledge/pub/properties.proto
message AccessPlayControl {
  //首次发布时间（时间戳，单位毫秒）
  optional int64 first_publish_time = 4;
}
2018/01/25 (2.0.180125)
39文学新增低质图片地址
1. /knowledge/pub/properties.proto
message LocaleImage {
  //JPG低质图片地址
  optional string jpg_image_url_lq = 12;
}
2018/01/22 (2.0.180122)
泡泡业务增加feed实体来源枚举值
1. /knowledge/pub/common.proto
enum FeedSourceType {
  //基线半屏播放器录制视频
  FEED_BASELINE_HALF_SCREEN = 18;
}
2018/01/22 (2.0.180122)
48feed新增直播发布的feed来源
1. /knowledge/pub/common.proto
enum FeedSourceType {
  //直播中心发布
  FEED_LIVE_CENTER = 20;
}
2018/01/19 (2.0.180119)
47圈子新增控制字段
1. /knowledge/pub/properties.proto
/**
 * @brief 圈子控制字段
 **/
message CircleOperationControl {
  //拒绝进搜索
  optional bool reject_search = 1 [default = false];
  //拒绝推荐
  optional bool reject_recommend = 2 [default = true];
}
2. /entity/schema-47-circle.fproto
message Circle {
  //圈子控制信息
  optional CircleOperationControl operation_control = 44 [(field_option).column_group = OPERATION_CONTROL, (column_option).column_name = "c_44_n"];
}
3. /knowledge/pub/common.proto
enum ColumnGroup {
  OPERATION_CONTROL = 673;
}
2018/01/18 (2.0.180118)
Portal为空资料页需求增加pay_mark_url字段
1. /portal/backend/entity_info.proto
message DisplayFields {
  ......
  // url for pay mark
  optional string pay_mark_url = 41;
}


2018/01/18 (2.0.180118)
48feed新增啪啪奇子类型feed
1. /knowledge/pub/common.proto
/**
 * @brief 啪啪奇feed子类型
 **/
enum PapaqiExtendedType {
  //未知类型
  UNKNOWN_PAPAQI_EXTENDED_TYPE = -1;
  //普通视频
  PAPAQI_EXTENDED_TYPE_COMMON_VIDEO = 0;
  //素材类型
  PAPAQI_EXTENDED_TYPE_MATERIAL = 1;
}
2. /knowledge/pub/metadatas.proto
message FeedContentExtendedType {
  //啪啪奇子类型数据
  optional PapaqiExtendedType papaqi_extended_type = 8 [default = UNKNOWN_PAPAQI_EXTENDED_TYPE];
}

2018/01/11 (2.0.180111)
新增轻小说书卷章实体
1. /knowledge/pub/common.proto
enum EntityIdType {
  //轻小说
  LIGHT_NOVEL = 1870;
  //轻小说卷
  LIGHT_NOVEL_VOLUME = 1970;
  //轻小说章
  LIGHT_NOVEL_CHAPTER = 2070;
}
enum Table {
  //轻小说
  LIGHT_NOVEL_TABLE = 69;
  //轻小说卷
  LIGHT_NOVEL_VOLUME_TABLE = 70;
  //轻小说章
  LIGHT_NOVEL_CHAPTER_TABLE = 71;
}
/**
 * @brief 创作者类型
 **/
enum CreatorType {
  //未知类型
  UNKNOWN_CREATOR_TYPE = -1;
  //作者
  CREATOR_TYPE_AUTHOR = 0;
  //画者
  CREATOR_TYPE_PAINTER = 1;
  //译者
  CREATOR_TYPE_TRANSLATOR = 2;
}
enum BookAuthType {
  //首发
  BOOK_FIRST_PUBLISH = 3;
}
/**
 * @brief 章节类型
 **/
enum ChapterType {
  //未知类型
  UNKNOWN_CHAPTER_TYPE = -1;
  //普通章
  CHAPTER_TYPE_COMMON = 0;
  //感言章
  CHAPTER_TYPE_REFLECTION = 1;
}
/**
 * @brief 创作者类型
 **/
enum CreatorType {
  //未知类型
  UNKNOWN_CREATOR_TYPE = -1;
  //作者
  CREATOR_TYPE_AUTHOR = 0;
  //画者
  CREATOR_TYPE_PAINTER = 1;
  //译者
  CREATOR_TYPE_TRANSLATOR = 2;
}
enum RegionType {
  //中国_大陆
  CHINA_MAINLAND = 4;
  //中国台湾
  CHINA_TAIWAN = 5;
  //日本
  JAPAN = 6;
  //韩国
  KOREA = 7;
}
enum ColumnGroup {
  CREATOR_SUMMARY = 651;
  CP_INFO = 652;
  CHAPTER_LAST_ONLINE_TIME = 644;
  BOOK_POLULARITY = 645;
  CHAPTER_SUMMARY = 646;
  CHAPTER_TYPE = 647;
  WORD_COUNT = 648;
}
2. /knowledge/fusion/query/properties.proto
message QipuEntity {
  //轻小说
  optional LightNovel light_novel = 71;
  //轻小说卷
  optional LightNovelVolume light_novel_volume = 72;
  //轻小说章
  optional LightNovelChapter light_novel_chapter = 73;
}
3. /knowledge/pub/read_service.proto
message GetEntityResponse {
  // Response for request of entity: LightNovel
  repeated LightNovel light_novel = 71;
  // Response for request of entity: LightNovelVolume
  repeated LightNovelVolume light_novel_volume = 72;
  // Response for request of entity: LightNovelChapter
  repeated LightNovelChapter light_novel_chapter = 73;
}
4. /knowledge/pub/write_service.proto

// Proto for setLightNovel method defined in write_rpc_service.thrift
message SetLightNovelRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_TABLE;
  option (request_options).set_interface = "setLightNovel";

  required User user = 1;

  optional LightNovel merge_light_novel = 2;
  optional LightNovel delete_light_novel = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLightNovelVolume method defined in write_rpc_service.thrift
message SetLightNovelVolumeRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_VOLUME_TABLE;
  option (request_options).set_interface = "setLightNovelVolume";

  required User user = 1;

  optional LightNovelVolume merge_light_novel_volume = 2;
  optional LightNovelVolume delete_light_novel_volume = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLightNovelVolume method defined in write_rpc_service.thrift
message SetLightNovelVolumeRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_VOLUME_TABLE;
  option (request_options).set_interface = "setLightNovelVolume";

  required User user = 1;

  optional LightNovelVolume merge_light_novel_volume = 2;
  optional LightNovelVolume delete_light_novel_volume = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}

// Proto for setLightNovelChapter method defined in write_rpc_service.thrift
message SetLightNovelChapterRequest {
  //option
  option (request_options).set_table = LIGHT_NOVEL_CHAPTER_TABLE;
  option (request_options).set_interface = "setLightNovelChapter";

  required User user = 1;

  optional LightNovelChapter merge_light_novel_chapter = 2;
  optional LightNovelChapter delete_light_novel_chapter = 3;

  // Whether to send message to activeMQ to notify audience. If you don't know
  // what exactly it is, leave it as default.
  optional bool should_notify_audience = 4 [default = true];

  // If you're doing a batch update,
  // please consider setting is_updated_in_batch_mode = true.
  // So the audience will know this is a batch update,
  // in which they may optimize the message processing.
  optional bool is_updated_in_batch_mode = 5 [default = false];

  // 消息优先级
  optional Priority priority = 6;
}
5. /entity/schema-1870-light-novel.fproto
/**
 * @brief 轻小说
 * @details 轻小说实体。
 **/
message LightNovel {
  //option
  option (entity_option).table = LIGHT_NOVEL_TABLE;
  option (entity_option).entity_name = "light_novel";
  option (table_option).hbase_table_name = "qipu_light_novel_table";
  option (entity_option).entity_id_type = LIGHT_NOVEL;
  //实体id
  required int64 id = 1 [(column_option).is_auto_set = true];
  //是否删除。奇谱不真正删除数据。 使用这个标识来标记该数据已经删除。
  optional bool deleted = 2 [default = false, (column_option).has_value = false, (field_option).column_group = DELETED, (column_option).column_name = "del"];
  //最后更新时间，任何字段更新都会导致这个最后更新时间被修改。这个字段由奇谱自动维护。
  optional int64 last_update_time = 3 [(field_option).column_group = LAST_UPDATE_TIME, (column_option).column_name = "lut", (column_option).is_auto_set = true, (track_option).notracker=true];
  //基本信息
  optional LightNovelMetadata metadata = 4 [(field_option).column_group = METADATA, (column_option).column_name = "c_4_n"];
  //运营信息
  optional BookBase base = 5 [(field_option).column_group = BASE, (column_option).column_name = "c_5_n"];
  //卷情况
  repeated MetaSummary volume_summary = 6 [(field_option).column_group = CHILD_VOLUME, (column_option).column_name = "c_6_n_", (column_option).column_suffix = "${entity_id}"];
  //章情况
  repeated MetaSummary chapter_summary = 7 [(field_option).column_group = CHILD_CHAPTER, (column_option).column_name = "c_7_n_", (column_option).column_suffix = "${entity_id}"];
  //创作者信息
  repeated CreatorSummary creator_summary = 8 [(field_option).column_group = CREATOR_SUMMARY, (column_option).column_name = "c_8_n_", (column_option).column_suffix = "${entity_id}"];
  //CP信息
  optional MetaSummary cp_summary = 9 [(field_option).column_group = CP_SUMMARY, (column_option).column_name = "c_9_n"];
  //图片相关
  optional LocaleImage local_image = 10 [(field_option).column_group = LOCAL_IMAGE, (column_option).column_name = "c_10_n"];
  //cp相关
  optional CpInfo cp_info = 11 [(field_option).column_group = CP_INFO, (column_option).column_name = "c_11_n"];
  //二级分类
  repeated CategorySummary category = 12 [(field_option).column_group = CATEGORY_SUMMARY, (column_option).column_name = "c_12_n_", (column_option).column_suffix = "${category_id}"];
  //标签
  repeated TagSummary tag_summary = 13 [(field_option).column_group = TAG_SUMMARY, (column_option).column_name = "c_13_n_", (column_option).column_suffix = "${source_type}"];
  //更新信息
  optional LightNovelUpdateInfo update_info = 14 [(field_option).column_group = UPDATE_INFO, (column_option).column_name = "c_14_n"];
  //完结状况
  optional BookAvailableStatus serialize_status = 15 [(field_option).column_group = AVAILABLE_STATUS, (column_option).column_name = "c_15_n"];
  //播控
  repeated Publication publication = 16 [(field_option).column_group = BOOK_PUBLICATION, (column_option).column_name = "c_16_n_", (column_option).column_suffix = "${platform}"];
  //最新章发布时间（时间戳，单位毫秒）
  optional int64 chapter_last_online_time = 17 [(field_option).column_group = CHAPTER_LAST_ONLINE_TIME, (column_option).column_name = "c_17_n"];
  //轻小说人气值（前台写入）
  optional int64 book_polularity = 18 [(field_option).column_group = BOOK_POLULARITY, (column_option).column_name = "c_18_n"];
  //总卷数
  optional int64 volume_count = 19 [(field_option).column_group = VOLUME_COUNT, (column_option).column_name = "c_19_n"];
  //总章数
  optional int64 chapter_count = 20 [(field_option).column_group = CHAPTER_COUNT, (column_option).column_name = "c_20_n"];
}
/**
 * @brief 轻小说卷
 * @details 轻小说的卷
 **/
message LightNovelVolume {
  //option
  option (entity_option).table = LIGHT_NOVEL_VOLUME_TABLE;
  option (entity_option).entity_name = "light_novel_volume";
  option (table_option).hbase_table_name = "qipu_light_novel_volume_table";
  option (entity_option).entity_id_type = LIGHT_NOVEL_VOLUME;
  //实体id
  required int64 id = 1 [(column_option).is_auto_set = true];
  //是否删除。奇谱不真正删除数据。 使用这个标识来标记该数据已经删除。
  optional bool deleted = 2 [default = false, (column_option).has_value = false, (field_option).column_group = DELETED, (column_option).column_name = "del"];
  //最后更新时间，任何字段更新都会导致这个最后更新时间被修改。这个字段由奇谱自动维护。
  optional int64 last_update_time = 3 [(field_option).column_group = LAST_UPDATE_TIME, (column_option).column_name = "lut", (column_option).is_auto_set = true, (track_option).notracker=true];
  //卷基本信息
  optional LightNovelVolumeMetadata metadata = 4 [(field_option).column_group = METADATA, (column_option).column_name = "c_4_n"];
  //所属书
  optional FatherInfo father_book = 5 [(field_option).column_group = FATHER_BOOK, (column_option).column_name = "c_5_n"];
  //章节
  repeated MetaSummary chapter_summary = 6 [(field_option).column_group = CHAPTER_SUMMARY, (column_option).column_name = "c_6_n_", (column_option).column_suffix = "${entity_id}"];
  //该卷章数
  optional int64 chapter_count = 7 [(field_option).column_group = CHAPTER_COUNT, (column_option).column_name = "c_7_n"];
  //最新章发布时间（时间戳，单位毫秒）
  optional int64 chapter_last_online_time = 8 [(field_option).column_group = CHAPTER_LAST_ONLINE_TIME, (column_option).column_name = "c_8_n"];
  //发布控制
  optional Publication publication = 9 [(field_option).column_group = BOOK_PUBLICATION, (column_option).column_name = "c_9_n"];
}
/**
 * @brief 轻小说章
 * @details 轻小说的章
 **/
message LightNovelChapter {
  //option
  option (entity_option).table = LIGHT_NOVEL_CHAPTER_TABLE;
  option (entity_option).entity_name = "light_novel_chapter";
  option (table_option).hbase_table_name = "qipu_light_novel_chapter_table";
  option (entity_option).entity_id_type = LIGHT_NOVEL_CHAPTER;
  //实体id
  required int64 id = 1 [(column_option).is_auto_set = true];
  //是否删除。奇谱不真正删除数据。 使用这个标识来标记该数据已经删除。
  optional bool deleted = 2 [default = false, (column_option).has_value = false, (field_option).column_group = DELETED, (column_option).column_name = "del"];
  //最后更新时间，任何字段更新都会导致这个最后更新时间被修改。这个字段由奇谱自动维护。
  optional int64 last_update_time = 3 [(field_option).column_group = LAST_UPDATE_TIME, (column_option).column_name = "lut", (column_option).is_auto_set = true, (track_option).notracker=true];
  //基本信息
  optional LightNovelChapterMetadata metadata = 4 [(field_option).column_group = METADATA, (column_option).column_name = "c_4_n"];
  //所属卷
  optional FatherInfo father_volume = 5 [(field_option).column_group = FATHER_VOLUME, (column_option).column_name = "c_5_n"];
  //所属书
  optional FatherInfo father_book = 6 [(field_option).column_group = FATHER_BOOK, (column_option).column_name = "c_6_n"];
  //章节类型
  optional ChapterType chapter_type = 7 [default = UNKNOWN_CHAPTER_TYPE, (field_option).column_group = CHAPTER_TYPE, (column_option).column_name = "c_7_n"];
  //内容相关
  repeated BookFormat format = 8 [(field_option).column_group = FORMAT, (column_option).column_name = "c_8_n_", (column_option).column_suffix = "${file_type}"];
  //发布控制
  optional Publication publication = 9 [(field_option).column_group = BOOK_PUBLICATION, (column_option).column_name = "c_9_n"];
  //章字数
  optional int64 word_count = 10 [(field_option).column_group = WORD_COUNT, (column_option).column_name = "c_10_n"];
  //章图片数
  optional int64 image_count = 11 [(field_option).column_group = IMAGE_COUNT, (column_option).column_name = "c_11_n"];
}
6. /knowledge/pub/properties.proto
/**
 * @brief 轻小说更新信息
 **/
message LightNovelUpdateInfo {
  //更新频率
  optional UpdateFrequency update_frequency = 1 [default = UNKNOWN_UPDATE_FREQUENCY];
  //周更新时间
  repeated UpdateDay weekly_update_time = 2;
}
/**
 * @brief 卷基本信息
 **/
message LightNovelVolumeMetadata {
  //卷id
  optional int64 entity_id = 1;
  //卷标题
  optional string title = 2;
  //卷类型
  optional VolumeType type = 3;
}
/**
 * @brief 作者相关情况(CP商提供)
 **/
message CpCreatorInfo {
  //作者名称
  optional string author = 1;
  //画师名称
  optional string painter = 2;
  //译者名称
  optional string translator = 3;
}
/**
 * @brief 作者信息
 **/
message CreatorSummary {
  //作者id
  optional int64 entity_id = 1;
  //创作者名称
  optional string creator_name = 2;
  //创作者类型
  optional CreatorType creator_type = 3 [default = UNKNOWN_CREATOR_TYPE];
}
/**
 * @brief cp相关
 **/
message CpInfo {
  //本书人气值（CP商提供的初始值）
  optional int64 popularity = 1;
  //创作者信息
  optional CpCreatorInfo creator_info = 2;
}
/**
 * @brief 基本信息
 **/
message LightNovelMetadata {
  //实体id
  optional int64 entity_id = 1;
  //书内容格式
  optional BookMediaType book_media_type = 2 [default = UNKNOWN_BOOKE_MEDIA_TYPE];
  //标题相关（title）
  optional Title title = 3;
  //简介
  optional string description = 4;
  //一句话简介
  optional string prompt_description = 5;
  //来源类型
  optional BookSourceType source_type = 6;
  //阅读顺序（纯图片的轻小说写入该字段）
  optional BookReadOrder read_order = 7 [default = UNKNOWN_BOOK_READ_ORDER];
  //创建时间(轻小说在奇谱的创建时间，乐高维护，单位毫秒)
  optional int64 create_time = 8;
}
/**
 * @brief 作者相关情况(CP商提供)
 **/
message CpCreatorInfo {
  //作者名称
  optional string author = 1;
  //画师名称
  optional string painter = 2;
  //译者名称
  optional string translator = 3;
}
/**
 * @brief 作者信息
 **/
message CreatorSummary {
  //作者id
  optional int64 entity_id = 1;
  //创作者名称
  optional string creator_name = 2;
  //创作者类型
  optional CreatorType creator_type = 3 [default = UNKNOWN_CREATOR_TYPE];
}
/**
 * @brief cp相关
 **/
message CpInfo {
  //本书人气值（CP商提供的初始值）
  optional int64 popularity = 1;
  //创作者信息
  optional CpCreatorInfo creator_info = 2;
}
/**
 * @brief 卷基本信息
 **/
message LightNovelVolumeMetadata {
  //卷id
  optional int64 entity_id = 1;
  //卷标题
  optional string title = 2;
  //卷类型
  optional VolumeType type = 3;
}
/**
 * @brief 基本信息
 **/
message LightNovelChapterMetadata {
  //章ID
  optional int64 entity_id = 1;
  //章名称
  optional string chapter_name = 2;
}
/**
 * @brief 轻小说更新信息
 **/
message LightNovelUpdateInfo {
  //更新频率
  optional UpdateFrequency update_frequency = 1 [default = UNKNOWN_UPDATE_FREQUENCY];
  //周更新时间
  repeated UpdateDay weekly_update_time = 2;
}
/**
 * @brief 书地区控制
 **/
message BookRegionControl {
  //地区
  repeated Location location = 1;
  //上线状态
  optional AvailableStatus available_status = 2 [default = NONE];
  //屏蔽搜索（True: not enter into search; False: enter into search.）
  optional bool reject_search = 3 [default = false];
  //屏蔽推荐（True: not enter into recommend; vice versa.）
  optional bool reject_recommend = 4 [default = false];
  //屏蔽进入TOP榜（True: not enter into top list; vice versa.）
  optional bool reject_top = 5 [default = false];
  //屏蔽免费书架字段（True: not enter into free bookshekf; vice versa.）
  optional bool reject_free_bookshelf = 6 [default = false];
  //是否可下载（True:allowed to download; vice versa.）
  optional bool is_download_allowed = 7 [default = false];
}
/**
 * @brief 基本信息
 **/
message LightNovelChapterMetadata {
  //章ID
  optional int64 entity_id = 1;
  //章名称
  optional string chapter_name = 2;
}
message Publication {
  //地区控制
  repeated BookRegionControl region_control = 13;
}
message BookBase {
  //书来源地区
  optional RegionType book_source_region = 9 [default = UNKNOWN_REGION];
}
/**
 * @brief 书地区控制
 **/
message BookRegionControl {
  //地区
  repeated Location location = 1;
  //上线状态
  optional AvailableStatus available_status = 2 [default = NONE];
  //屏蔽搜索（True: not enter into search; False: enter into search.）
  optional bool reject_search = 3 [default = false];
  //屏蔽推荐（True: not enter into recommend; vice versa.）
  optional bool reject_recommend = 4 [default = false];
  //屏蔽进入TOP榜（True: not enter into top list; vice versa.）
  optional bool reject_top = 5 [default = false];
  //屏蔽免费书架字段（True: not enter into free bookshekf; vice versa.）
  optional bool reject_free_bookshelf = 6 [default = false];
  //是否可下载（True:allowed to download; vice versa.）
  optional bool is_download_allowed = 7 [default = false];
}
7. /entity/schema-1970-light-novel-volume.fproto
/**
 * @brief 轻小说卷
 * @details 轻小说的卷
 **/
message LightNovelVolume {
  //option
  option (entity_option).table = LIGHT_NOVEL_VOLUME_TABLE;
  option (entity_option).entity_name = "light_novel_volume";
  option (table_option).hbase_table_name = "qipu_light_novel_volume_table";
  option (entity_option).entity_id_type = LIGHT_NOVEL_VOLUME;
  //实体id
  required int64 id = 1 [(column_option).is_auto_set = true];
  //是否删除。奇谱不真正删除数据。 使用这个标识来标记该数据已经删除。
  optional bool deleted = 2 [default = false, (column_option).has_value = false, (field_option).column_group = DELETED, (column_option).column_name = "del"];
  //最后更新时间，任何字段更新都会导致这个最后更新时间被修改。这个字段由奇谱自动维护。
  optional int64 last_update_time = 3 [(field_option).column_group = LAST_UPDATE_TIME, (column_option).column_name = "lut", (column_option).is_auto_set = true, (track_option).notracker=true];
  //卷基本信息
  optional LightNovelVolumeMetadata metadata = 4 [(field_option).column_group = METADATA, (column_option).column_name = "c_4_n"];
  //所属书
  optional FatherInfo father_book = 5 [(field_option).column_group = FATHER_BOOK, (column_option).column_name = "c_5_n"];
  //章节
  repeated MetaSummary chapter_summary = 6 [(field_option).column_group = CHAPTER_SUMMARY, (column_option).column_name = "c_6_n_", (column_option).column_suffix = "${entity_id}"];
  //该卷章数
  optional int64 chapter_count = 7 [(field_option).column_group = CHAPTER_COUNT, (column_option).column_name = "c_7_n"];
  //最新章发布时间（时间戳，单位毫秒）
  optional int64 chapter_last_online_time = 8 [(field_option).column_group = CHAPTER_LAST_ONLINE_TIME, (column_option).column_name = "c_8_n"];
  //发布控制
  optional Publication publication = 9 [(field_option).column_group = BOOK_PUBLICATION, (column_option).column_name = "c_9_n"];
}
8. /entity/schema-2070-light-novel-chapter.fproto
/**
 * @brief 轻小说章
 * @details 轻小说的章
 **/
message LightNovelChapter {
  //option
  option (entity_option).table = LIGHT_NOVEL_CHAPTER_TABLE;
  option (entity_option).entity_name = "light_novel_chapter";
  option (table_option).hbase_table_name = "qipu_light_novel_chapter_table";
  option (entity_option).entity_id_type = LIGHT_NOVEL_CHAPTER;
  //实体id
  required int64 id = 1 [(column_option).is_auto_set = true];
  //是否删除。奇谱不真正删除数据。 使用这个标识来标记该数据已经删除。
  optional bool deleted = 2 [default = false, (column_option).has_value = false, (field_option).column_group = DELETED, (column_option).column_name = "del"];
  //最后更新时间，任何字段更新都会导致这个最后更新时间被修改。这个字段由奇谱自动维护。
  optional int64 last_update_time = 3 [(field_option).column_group = LAST_UPDATE_TIME, (column_option).column_name = "lut", (column_option).is_auto_set = true, (track_option).notracker=true];
  //基本信息
  optional LightNovelChapterMetadata metadata = 4 [(field_option).column_group = METADATA, (column_option).column_name = "c_4_n"];
  //所属卷
  optional FatherInfo father_volume = 5 [(field_option).column_group = FATHER_VOLUME, (column_option).column_name = "c_5_n"];
  //所属书
  optional FatherInfo father_book = 6 [(field_option).column_group = FATHER_BOOK, (column_option).column_name = "c_6_n"];
  //章节类型
  optional ChapterType chapter_type = 7 [default = UNKNOWN_CHAPTER_TYPE, (field_option).column_group = CHAPTER_TYPE, (column_option).column_name = "c_7_n"];
  //内容相关
  repeated BookFormat format = 8 [(field_option).column_group = FORMAT, (column_option).column_name = "c_8_n_", (column_option).column_suffix = "${file_type}"];
  //发布控制
  optional Publication publication = 9 [(field_option).column_group = BOOK_PUBLICATION, (column_option).column_name = "c_9_n"];
  //章字数
  optional int64 word_count = 10 [(field_option).column_group = WORD_COUNT, (column_option).column_name = "c_10_n"];
  //章图片数
  optional int64 image_count = 11 [(field_option).column_group = IMAGE_COUNT, (column_option).column_name = "c_11_n"];
}
9. /knowledge/pub/metadatas.proto
message Title {
  //外文名
  optional string foreign_title = 9;
}
2018/01/10 (2.0.180110)
00/09新增图片质量标注字段
1. /knowledge/pub/properties.proto
/**
 * @brief 图片质量标记
 **/
message ImageQualityMark {
  //图片尺寸
  optional string image_size = 1;
  //检查状态
  optional ResultCheck check_status = 2 [default = UNCHECKED_NOW];
  //图片来源
  optional ImageSource image_source = 3 [default = UNKNOWN_IMAGE_SOURCE];
  //图片版本（记录此时图片的版本号，核对标注的图片与线上图片一致性）
  optional string image_verson = 4;
  //是否不清晰
  optional bool is_low_resolution = 5 [default = false];
  //是否不完整
  optional bool is_incomplete = 6 [default = false];
  //是否黑边
  optional bool is_black_border = 7 [default = false];
  //是否毛玻璃
  optional bool is_frosted_glass = 8 [default = false];
  //是否拉伸
  optional bool is_stretched = 9 [default = false];
  //是否尺寸不合适
  optional bool is_off_size = 10 [default = false];
}
/**
 * @brief 图片质量信息
 **/
message ImageQualityInfo {
  //图片类型
  optional LocaleImage.ImageType image_type = 1 [default = COVER];
  //质量标记
  repeated ImageQualityMark quality_mark = 2;
}
/**
 * @brief 图片质量标记
 **/
message ImageQualityMark {
  //图片尺寸
  optional string image_size = 1;
  //检查状态
  optional ResultCheck check_status = 2 [default = UNCHECKED_NOW];
  //图片来源
  optional ImageSource image_source = 3 [default = UNKNOWN_IMAGE_SOURCE];
  //图片版本（记录此时图片的版本号，核对标注的图片与线上图片一致性）
  optional string image_verson = 4;
  //是否不清晰
  optional bool is_low_resolution = 5 [default = false];
  //是否不完整
  optional bool is_incomplete = 6 [default = false];
  //是否黑边
  optional bool is_black_border = 7 [default = false];
  //是否毛玻璃
  optional bool is_frosted_glass = 8 [default = false];
  //是否拉伸
  optional bool is_stretched = 9 [default = false];
  //是否尺寸不合适
  optional bool is_off_size = 10 [default = false];
}
2. /knowledge/pub/common.proto
/**
 * @brief 图片来源
 **/
enum ImageSource {
  //未知类型
  UNKNOWN_IMAGE_SOURCE = -1;
  //AI识别的备选图
  IMAGE_SOURCE_AI_IMAGE = 0;
  //视频中截的图
  IMAGE_SOURCE_VIDEO_SCREENSHOT = 1;
}
enum ColumnGroup {
  IMAGE_QUALITY_INFO = 671;
}
3. /entity/schema-00-episode.fproto
message Episode {
  //图片质量信息
  repeated ImageQualityInfo image_quality_info = 243 [(field_option).column_group = IMAGE_QUALITY_INFO, (column_option).column_name = "c_243_n_", (column_option).column_suffix = "${image_type}"];
}
4. /entity/schema-09-ugc-episode.fproto
message UgcEpisode {
  //图片质量信息
  repeated ImageQualityInfo image_quality_info = 124 [(field_option).column_group = IMAGE_QUALITY_INFO, (column_option).column_name = "c_124_n_", (column_option).column_suffix = "${image_type}"];
}
2018/01/08 (2.0.180108)
00增加弹幕类型字段
1. /knowledge/pub/common.proto
/**
 * @brief 弹幕类型
 **/
enum DanmuType {
  //未知类型
  UNKNOWN_DANMU_TYPE = -1;
  //普通弹幕
  DANMU_TYPE_COMMON = 0;
  //角色弹幕
  DANMU_TYPE_CHARACTER = 1;
}
2. /entity/schema-01-album.fproto
message Album {
  //弹幕群聊信息
  optional MynaInfo myna_info = 225 [(field_option).column_group = MYNA_INFO, (column_option).column_name = "c_225_n"];
}
3. /knowledge/pub/properties.proto
message MynaInfo {
  //弹幕类型
  optional DanmuType danmu_type = 2 [default = DANMU_TYPE_COMMON];
}
2018/01/08 (2.0.180108)
33实体type字段新增枚举值
1. /entity/schema--type.fproto
enum Type {
    //轻小说
    LIGHT_NOVEL = 8;
}
2018/01/04 (2.0.180104)
:23liveepisode下直播子业务类型新增枚举
1. /knowledge/pub/common.proto
enum LiveEpisodeSubType {
  //娱乐
  LIVE_EPISODE_SUB_TYPE_ENTERTAINMENT = 5;
  //资讯
  LIVE_EPISODE_SUB_TYPE_NEWS = 6;
  //生活
  LIVE_EPISODE_SUB_TYPE_LIFE = 7;
  //体育
  LIVE_EPISODE_SUB_TYPE_SPORT = 8;
  //教育
  LIVE_EPISODE_SUB_TYPE_EDUCATION = 9;
}
enum LiveRoomType {
  //娱乐
  LIVE_ROOM_TYPE_ENTERTAINMENT = 6;
  //资讯
  LIVE_ROOM_TYPE_NEWS = 7;
  //生活
  LIVE_ROOM_TYPE_LIFE = 8;
  //体育
  LIVE_ROOM_TYPE_SPORT = 9;
  //教育
  LIVE_ROOM_TYPE_EDUCATION = 10;
}
2018/01/04 (2.0.180104)
00/01 operation_control_base新增下载缓存时间字段
1. /knowledge/pub/properties.proto
message OperationControlBase {
  //下载缓存天数（取值1-45，无天数限制则为空）
  optional int32 download_cache_day = 11;
}
2018/01/04 (2.0.180104)
00/01 operation_control_base新增下载缓存时间字段
1. /knowledge/pub/properties.proto
message OperationControlBase {
  //下载缓存天数（取值1-45，无天数限制则为空）
  optional int32 download_cache_day = 11;
}

// Author: Qi Qiao (qiaoqi@qiyi.com)
import "knowledge/pub/common.proto";
import "knowledge/pub/qipu_options.proto";

package knowledge.pub;

// The entity definition for one category.
message Category {
  required int64 id = 1;
  optional int64 channel_id = 2;
  optional string channel_name = 3;
  optional int64 tag_id = 4;
  optional string category_name = 5;
  optional string category_key = 6;
  optional int64 parent_id = 7;
  optional int32 category_order = 8;
  optional int32 level = 9;
  optional int32 status = 10;
  optional string display_type = 11;
  optional string platform = 12;
  optional Date create_time = 13;
  optional Date update_time = 14;
  optional int64 version = 15;
  optional int32 vrs_sub_type = 16;
  optional int32 display = 17;
  optional int32 type_order = 18;
  optional int32 ugc_display = 19;
  optional int32 ppc_used = 20;
  optional int32 ugc_used = 21;
  optional int32 tv_display = 22;
  optional int32 tv_order = 23;
  optional bool is_deleted = 24 [default = false];
  optional knowledge.pub.Brand brand = 25;
  optional string taiwan_name = 26;
  optional int32 taiwan_display = 27;
  
}

// The definition of request for insert or update operation towards category.
message SetCategoryRequest {

  option (service_message_options).method_name = "setCategory";
  option (service_message_options).type = REQUEST;
  required knowledge.pub.User user = 1;

  repeated Category category = 2;

  // If there exists one category in database with the same id as the category
  // of this request:
  //    1. If it's set to true, we just substitute the latter for the former.
  //    2. If it's set to false, we just use the fields of category in this request
  //       to update the existing category in database.
  // Otherwise, if no category exists in database with the same id as the category
  // of this request, we just insert it to database, no matter what it's set to.
  optional bool is_update_overall = 3 [default = true];
}

// The response for SetCategory.
message SetCategoryResponse {
  option (service_message_options).method_name = "setCategory";
  option (service_message_options).type = RESPONSE;
  required RpcStatusInfo rpc_status_info = 1;
}

// The definition of request for getting all categories of one channel.
message GetChannelCategoryListRequest {

  option (service_message_options).method_name = "getChannelCategoryList";
  option (service_message_options).type = REQUEST;
  // The user who launches the request.
  required knowledge.pub.User user = 1;

  // The specified channel id.
  required int64 channel_id = 2;
}

// The definition of response for getting all categories of one channel.
message GetChannelCategoryListResponse {

  option (service_message_options).method_name = "getChannelCategoryList";
  option (service_message_options).type = RESPONSE;
  // It depicts the status of corresponding request.
  required string code = 1;

  required RpcStatusInfo rpc_status_info = 3;

  message Data {
    required int64 channelId = 1;

    message ChannelCategoryData {
      // The corresponding channel id.
      required int64 channel_id = 1;

      // Indicates whether display or not, 1 stands for display.
      required int32 display = 2 [default = 0];

      // The corresponding id of category.
      required int64 id = 3;

      // The category's name.
      required string name = 4;

      // Indicates the order below the same parent.
      required int32 order = 5;

      // The id of this category's parent.
      required int64 parent_id = 6;

      // Indicates whether it's used by ppc with 1 means used.
      required int32 ppc_used = 7 [default = 0];

      // Corresponding to vrs_sub_type.
      required int32 sub_type = 8;

      // The associated tag's id.
      required int64 tag_id = 9;

      // Prefix top means the super parent(also root) of this category.
      required int32 top_display = 10;
      required int32 top_order = 11;
      required int64 top_parent_id = 12;
      required string top_parent_key = 13;
      required string top_parent_name = 14;

      // Flags related to ugc utility.
      required int32 ugc_display = 15 [default = 0];
      required int32 ugc_used = 16 [default = 0];

      // Flags and order related to tv platform.
      optional int32 tv_display = 17;
      optional int32 tv_order = 18;

      // Brand for self and top parent
      optional knowledge.pub.Brand brand = 19;
      optional knowledge.pub.Brand top_brand = 20;

      // flag for Deleting this category or not
      optional bool is_deleted = 21 [default = false];

      optional string taiwan_name = 22;
      optional int32 taiwan_display = 23;
    }
    repeated ChannelCategoryData channelData = 2;
  }
  repeated Data data = 2;
}

// The definition of request for getting all secondary categories.
message GetSubCategoryRequest {
  option (service_message_options).method_name = "getSubCategory";
  option (service_message_options).type = REQUEST;
  required knowledge.pub.User user = 1;
}

// The definition of response for getting all secondary categories.
message GetSubCategoryResponse {

  option (service_message_options).method_name = "getSubCategory";
  option (service_message_options).type = RESPONSE;
  // It depicts the status of corresponding request.
  required string code = 1;

  required RpcStatusInfo rpc_status_info = 3;

  message Data {
    // Corresponding to channel id.
    required int64 categoryId = 1;
    required int32 display = 2;
    required int64 id = 3;
    required string name = 4;
    required int32 ppc_used = 5;
    required int32 sub_type = 6;
    required int32 ugc_display = 7;
    required int32 ugc_used = 8;
    optional int32 tv_display = 9;
    optional int32 tv_order = 10;

    optional knowledge.pub.Brand brand = 11;
    optional bool is_deleted = 12 [default = false];

    optional string taiwan_name = 13;
    optional int32 taiwan_display = 14;
  }
  repeated Data data = 2;
}

// The definition of request for getting a category by its id.
message GetCategoryRequest {

  option (service_message_options).method_name = "getCategoryById";
  option (service_message_options).type = REQUEST;

  required knowledge.pub.User user = 1;

  repeated int64 category_id = 2;
}

// The definition of response for getting a category by its id.
message GetCategoryResponse {

  option (service_message_options).method_name = "getCategoryById";
  option (service_message_options).type = RESPONSE;
  // It depicts the status of corresponding request.
  required RpcStatusInfo rpc_status_info = 1;

  repeated Category category_list = 2;
}

// The definition of request for deleting a category by its id.
message DeleteCategoryRequest {

  option (service_message_options).method_name = "deleteCategoryById";
  option (service_message_options).type = REQUEST;
  
  required knowledge.pub.User user = 1;

  repeated int64 category_id = 2;
}

// The definition of response for deleting a category by its id.
message DeleteCategoryResponse {

  option (service_message_options).method_name = "deleteCategoryById";
  option (service_message_options).type = RESPONSE;
  // It depicts the status of corresponding request.
  required RpcStatusInfo rpc_status_info = 1;

  repeated int64 failed_category_list = 2;
}

